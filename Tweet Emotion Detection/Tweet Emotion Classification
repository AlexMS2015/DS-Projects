{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Tweet classification - Alex Smith (42592380).ipynb","provenance":[],"collapsed_sections":["vcEnXWc3mqr6","l6M39mWGFbpm","V07pwr1ISw8S","ld1J8rxsGa59","nXeXPsnNIFhB","7TqksvsoTRz8","O4PMJNXpS7LC"]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.7"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"tZWdaaO0MQ03"},"source":["General sources:\n","\n","- https://towardsdatascience.com/sentiment-analysis-with-python-part-1-5ce197074184\n","- https://towardsdatascience.com/sentiment-analysis-with-python-part-2-4f71e7bde59a"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590731991316,"user_tz":-600,"elapsed":26497,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"OPook2sMMSMT","outputId":"539c0de0-9e05-4c09-efc9-f073b2f0d61a","colab":{"base_uri":"https://localhost:8080/","height":530}},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from os.path import join\n","from google.colab import drive\n","import pickle\n","\n","drive.mount('/content/drive/')\n","\n","def load_pickle(path):\n","    with open(path, 'rb') as f:\n","        file = pickle.load(f)\n","        print ('Loaded %s..' %path)\n","        return file\n","\n","dataset_directory = '/content/drive/My Drive/Colab Notebooks/tweet-emotion-detection/language_dataset'\n","\n","emotions = ['anger', 'fear', 'joy', 'sadness']\n","\n","tweets_train = np.load(join(dataset_directory, 'text_train_tweets.npy'))\n","labels_train = np.load(join(dataset_directory, 'text_train_labels.npy'))\n","vocabulary = load_pickle(join(dataset_directory, 'text_word_to_idx.pkl'))\n","\n","tweets_val = np.load(join(dataset_directory, 'text_val_tweets.npy'))\n","labels_val = np.load(join(dataset_directory, 'text_val_labels.npy'))\n","\n","tweets_test_public = np.load(join(dataset_directory, 'text_test_public_tweets_rand.npy'))\n","\n","print(len(vocabulary))\n","idx_to_word = {i: w for w, i in vocabulary.items()}\n","for i in range(7):\n","  print(i, idx_to_word[i])\n","\n","sample = 1\n","\n","print('sample tweet, stored form:')\n","print(tweets_train[sample])\n","print(labels_train[sample])\n","\n","print('sample tweet, readable form:')\n","decode = []\n","#tweet_string\n","for i in range(50):\n","  decode.append(idx_to_word[tweets_train[sample][i]])\n","print(decode)\n","print(emotions[labels_train[sample]])\n","\n","print(\"\\nPossible words for each feature:\", len(vocabulary))\n","print(\"Training data X:\", tweets_train.shape)\n","print(\"Training data y:\", labels_train.shape)\n","print(\"Val data X:\", tweets_val.shape)\n","print(\"Val data y:\", labels_val.shape)\n","print(\"Test data X:\", tweets_test_public.shape)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive/\n","Loaded /content/drive/My Drive/Colab Notebooks/tweet-emotion-detection/language_dataset/text_word_to_idx.pkl..\n","13978\n","0 <NULL>\n","1 <START>\n","2 <END>\n","3 it\n","4 makes\n","5 me\n","6 so\n","sample tweet, stored form:\n","[ 1 23 24 20 25 19 26 27 28  2  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0\n","  0  0  0  0]\n","0\n","sample tweet, readable form:\n","['<START>', 'lol', 'adam', 'the', 'bull', 'with', 'his', 'fake', 'outrage', '<END>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>', '<NULL>']\n","anger\n","\n","Possible words for each feature: 13978\n","Training data X: (7098, 52)\n","Training data y: (7098,)\n","Val data X: (1460, 52)\n","Val data y: (1460,)\n","Test data X: (4064, 52)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"2gEQJTIXFQ7T","colab":{}},"source":["# create a test submission file with all tweets predicted as 'anger' (1)\n","y_test_predict_np = np.c_[np.array(range(1, 4065)).astype(int), np.ones(4064).astype(int)]\n","y_test_predict = pd.DataFrame(y_test_predict_np, columns=[\"ID\", \"Prediction\"])\n","y_test_predict.to_csv(join(dataset_directory, \"42592380-conv.csv\"), index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"vcEnXWc3mqr6"},"source":["## Data Exploration"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"XFCzDXxTmweY"},"source":["How many times does each emotion appear in the training set? Are the classes well balanced?\n"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590728884919,"user_tz":-600,"elapsed":3365,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"MTwxAZbImsgF","outputId":"f88e2ac5-3238-4b8b-cfa5-60669bbff680","colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["emotion_nums, counts = np.unique(labels_train, return_counts=True)\n","plt.bar(emotions, counts/len(labels_train));\n","\n","# Answer: the classes are reasonably well balanced"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"aqbD1p80nB9U"},"source":["Are the tweets for different emotions of similar length on average?"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"pgbXcYQzm4Li","outputId":"1e85de20-2e29-4ecf-e524-b0eaed90aa57","executionInfo":{"status":"ok","timestamp":1590728885616,"user_tz":-600,"elapsed":4043,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["# Count number of words per tweet. The tweets include items that are not words like <START>, <END> and <NULL>. Don't\n","# include these in the count.\n","tweets_train_wordcount = []\n","for tweet in tweets_train:\n","  word_count = 0\n","  for vocab_idx in tweet:\n","    word = idx_to_word[vocab_idx]\n","    if word not in ['<START>', '<END>', '<NULL>']:\n","      word_count += 1\n","  tweets_train_wordcount.append(word_count)\n","tweets_train_wordcount = np.array(tweets_train_wordcount)\n","\n","# box-plots\n","anger = tweets_train_wordcount[np.array(labels_train==0)]\n","fear = tweets_train_wordcount[np.array(labels_train==1)]\n","joy = tweets_train_wordcount[np.array(labels_train==2)]\n","sadness = tweets_train_wordcount[np.array(labels_train==3)]\n","\n","plt.boxplot([anger, fear, joy, sadness]);\n","plt.xticks([1, 2, 3, 4], emotions);\n","\n","# Answer: yes, tweet lenghts appear to be similar across different emotions"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"lKIYq8QAFWic"},"source":["## Data pre-processing:"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"szJEUZWd6sbH"},"source":["De-emoji, remove hashtags, stop words, punctuation and lemmatize the tweets:"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590732330271,"user_tz":-600,"elapsed":59706,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"IrG3xiUz3bLv","outputId":"423e89df-4acf-4489-e9cf-0ca3ed57738d","colab":{"base_uri":"https://localhost:8080/","height":292}},"source":["# Some of this code comes from the lecture notes\n","\n","!pip install emoji --upgrade\n","import emoji\n","\n","import string\n","from collections import defaultdict\n","\n","import nltk\n","nltk.download(['stopwords', 'punkt', 'wordnet', 'averaged_perceptron_tagger'])\n","from nltk import pos_tag\n","from nltk.stem import WordNetLemmatizer\n","from nltk.tokenize import word_tokenize\n","from nltk.corpus import stopwords, wordnet as wn\n","\n","tag_map = defaultdict(lambda : wn.NOUN); tag_map['J'] = wn.ADJ; tag_map['V'] = wn.VERB; tag_map['R'] = wn.ADV\n","\n","def normalise_tweets(tweets):\n","  lemmatizer = WordNetLemmatizer()\n","  stop_punct = stopwords.words('english') + list(string.punctuation)\n","  \n","  normalised_tweets = []\n","  for tweet in tweets:\n","\n","    # Step 1 - the tweets are currently indexes. this loop converts them to a list of words without the '<START>', '<END>', '<NULL>'\n","    # and '<user>' which are useless. It also uses word_tokenize which will split off hashtags - e.g. '#tag' becomes '# tag'. It\n","    # also uses the emoji package to convert emoji pictures into words as these could be valuable.\n","    tweet_words = []\n","    for vocab_idx in tweet:\n","      word = emoji.demojize(idx_to_word[vocab_idx])\n","      if word == '<END>': break\n","      if word not in ['<START>', '<NULL>', '<user>']:\n","        tweet_words += word_tokenize(word) # word_tokenize splits off the hashtags\n","    \n","    # Step 2 - for the tweets constructed in the first loop, the following loop tags them, then removes punctuation and digtits and\n","    # short words and then finally lemmatizes the word. It re-constructs the tweet as a string.\n","    normalised_tweet = \"\"\n","    for word, tag in pos_tag(tweet_words):\n","      if word not in stop_punct and not word.isdigit() and len(word) > 2:\n","        pos = tag_map[tag[0]]\n","        normalised_tweet = normalised_tweet + lemmatizer.lemmatize(word, pos) + ' '\n","      else:\n","        tweet_words.remove(word)\n","\n","    normalised_tweets.append(normalised_tweet)\n","\n","  return normalised_tweets\n","\n","tweets_train_normalised = normalise_tweets(tweets_train)\n","tweets_val_normalised = normalise_tweets(tweets_val)\n","tweets_test_normalised = normalise_tweets(tweets_test_public)\n","tweets_normalised = tweets_train_normalised + tweets_val_normalised\n","\n","tweets_train_normalised[1:5]"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already up-to-date: emoji in /usr/local/lib/python3.6/dist-packages (0.5.4)\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n","[nltk_data]       date!\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["['lol adam bull fake outrage outrage outrage outrage outrage ',\n"," 'pass away early morning fast furious styled car crash leave atl strip club rough stuff furious furious furious furious styled styled styled styled ',\n"," 'lol wow gon say really haha see chris nah dont even snap anymore dude wow wow wow wow gon gon gon gon haha haha haha haha ',\n"," 'need bento_box sushi date rice_ball spaghetti olive guard date cheese_wedge oncoming_fist medium_light_skin_tone rockys date pizza ']"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"EjCRBh8WYJfm"},"source":["## Feature engineering:"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"FYxftPo9YRhe"},"source":["Vectorise the words using a TF-IDF approach:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"BbHgZty4cNHD","colab":{}},"source":["# shuffle the training set and validation set. the data is ordered by emotion so needs shuffling if I am going to use\n","# cross-validation for a grid search later on.\n","\n","train_set = np.c_[tweets_train_normalised, labels_train]\n","np.random.shuffle(train_set)\n","tweets_train_normalised_shuffled = train_set[:, 0]\n","\n","val_set = np.c_[tweets_val_normalised, labels_val]\n","np.random.shuffle(val_set)\n","tweets_val_normalised_shuffled = val_set[:, 0]\n","\n","tweets_normalised_shuffled = np.concatenate((tweets_train_normalised_shuffled, tweets_val_normalised_shuffled))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590732369651,"user_tz":-600,"elapsed":1087,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"TNOWz9cFYDD7","outputId":"337be489-f296-4aff-f848-77c904896b3b","colab":{"base_uri":"https://localhost:8080/","height":136}},"source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","import copy\n","\n","# there are 7098 tweets in the dataset, hence limit to the features to something reasonable. Start with 3500.\n","tfidf_train = TfidfVectorizer(ngram_range=(1, 1), max_features=3500)\n","X_train = tfidf_train.fit_transform(tweets_train_normalised_shuffled)\n","X_val = tfidf_train.transform(tweets_val_normalised_shuffled)\n","y_train = train_set[:,1]\n","y_val = val_set[:,1]\n","\n","tfidf_all = copy.deepcopy(tfidf_train)\n","X = tfidf_all.fit_transform(tweets_normalised_shuffled)\n","y = np.concatenate([y_train, y_val])\n","X_test = tfidf_train.transform(tweets_test_normalised)\n","\n","X_train.shape, y_train.shape, X_val.shape, y_val.shape, X.shape, y.shape, X_test.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((7098, 3500),\n"," (7098,),\n"," (1460, 3500),\n"," (1460,),\n"," (8558, 3500),\n"," (8558,),\n"," (4064, 3500))"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"8_085FNIUdN2"},"source":["# Train conventional ML models:"]},{"cell_type":"markdown","metadata":{"id":"Asy_srritW4P","colab_type":"text"},"source":["Fear is the majority class in the training data (see data exploration section). Hence, a majority class classifier (always picking fear) would obtain 26.5% accuracy on the validation set:"]},{"cell_type":"code","metadata":{"id":"tngaToYYtXWS","colab_type":"code","outputId":"3acaf270-3383-4abe-e1b3-555397cea337","executionInfo":{"status":"ok","timestamp":1590732659785,"user_tz":-600,"elapsed":1085,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":173}},"source":["emotion_nums, counts = np.unique(labels_val, return_counts=True)\n","pd.DataFrame(np.round(100*counts/len(labels_val),2), index=emotions, columns=['% of val set'])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>% of val set</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>anger</th>\n","      <td>26.51</td>\n","    </tr>\n","    <tr>\n","      <th>fear</th>\n","      <td>26.58</td>\n","    </tr>\n","    <tr>\n","      <th>joy</th>\n","      <td>19.79</td>\n","    </tr>\n","    <tr>\n","      <th>sadness</th>\n","      <td>27.12</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         % of val set\n","anger           26.51\n","fear            26.58\n","joy             19.79\n","sadness         27.12"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"YNmH6kLbYzVv"},"source":["Fit a Naive Bayes classifier to give a baseline for performance measurement on other models. 43% accuracy is a big improvement on the majority class classifier:"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590732373577,"user_tz":-600,"elapsed":1715,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"cyyvVSiyIbdU","outputId":"f605501e-bd73-4960-fd1e-55dc6b9dcb9a","colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["from sklearn.metrics import accuracy_score\n","from sklearn.naive_bayes import MultinomialNB\n","\n","nb_clf = MultinomialNB()\n","nb_clf.fit(X_train, y_train)\n","print(\"Training accuracy:\", accuracy_score(y_train, nb_clf.predict(X_train)), \"\\n\",\n","      \"Validation Accuracy:\", accuracy_score(y_val, nb_clf.predict(X_val)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training accuracy: 0.9023668639053254 \n"," Validation Accuracy: 0.44246575342465755\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"rLcryu8FY77d"},"source":["Try several candidate models with default settings to see which might be worth investigating further:"]},{"cell_type":"code","metadata":{"id":"0VeiuMK2-bFh","colab_type":"code","colab":{}},"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.svm import LinearSVC, SVC"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Uq1hBQnKX1xE","colab":{}},"source":["def reset_models_to_original():\n","  models = {\"Naive Bayes\" : MultinomialNB(),\n","            \"KNN\" : KNeighborsClassifier(n_neighbors = 10),\n","            \"Logistic Reg\" : LogisticRegression(multi_class='ovr', max_iter=500),\n","            \"Softmax\" : LogisticRegression(multi_class='multinomial', solver='lbfgs'),\n","            \"Linear SVM\" : LinearSVC(),\n","            \"Non-Linear SVM\" : SVC(),\n","            \"Random Forest\" : RandomForestClassifier(random_state=0),\n","            \"Grad. Boosting\" : GradientBoostingClassifier()}\n","  return models\n","\n","models = reset_models_to_original()"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"3XjN6xtIZDEu"},"source":["KNN does not scale well when the number of features is high relative to the number of instances so performs poorly on both training and validation set. The other models perform very well on the training set but not very well on the validation set which suggests overfitting.\n"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590732411502,"user_tz":-600,"elapsed":33945,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"V0B3lILUYZzJ","outputId":"4802c3de-e3f7-440e-f6c4-bd7e6ff2ef20","colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["from IPython.display import display\n","\n","def run_models(models_dict, X_train, y_train, X_val, y_val):\n","  training_accuracies = []\n","  validation_accuracies = []\n","  column_titles = []\n","  for model_name, model in models_dict.items():\n","    column_titles.append(model_name)\n","    model.fit(X_train, y_train)\n","    training_accuracies.append(accuracy_score(y_train, model.predict(X_train)))\n","    validation_accuracies.append(accuracy_score(y_val, model.predict(X_val)))\n","\n","  display(pd.DataFrame(np.c_[np.round(training_accuracies, 4), np.round(validation_accuracies, 4)].transpose(),\n","                       columns=column_titles, index=[\"Training data\", \"Validation data\"]))\n","\n","run_models(models, X_train, y_train, X_val, y_val)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Naive Bayes</th>\n","      <th>KNN</th>\n","      <th>Logistic Reg</th>\n","      <th>Softmax</th>\n","      <th>Linear SVM</th>\n","      <th>Non-Linear SVM</th>\n","      <th>Random Forest</th>\n","      <th>Grad. Boosting</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Training data</th>\n","      <td>0.9024</td>\n","      <td>0.4439</td>\n","      <td>0.9197</td>\n","      <td>0.9305</td>\n","      <td>0.9594</td>\n","      <td>0.9634</td>\n","      <td>0.9720</td>\n","      <td>0.8390</td>\n","    </tr>\n","    <tr>\n","      <th>Validation data</th>\n","      <td>0.4425</td>\n","      <td>0.3178</td>\n","      <td>0.4507</td>\n","      <td>0.4500</td>\n","      <td>0.4548</td>\n","      <td>0.4445</td>\n","      <td>0.4438</td>\n","      <td>0.4226</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Naive Bayes     KNN  ...  Random Forest  Grad. Boosting\n","Training data         0.9024  0.4439  ...         0.9720          0.8390\n","Validation data       0.4425  0.3178  ...         0.4438          0.4226\n","\n","[2 rows x 8 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"oilL-SGUYfbj","colab_type":"text"},"source":["Regularise the models to reduce overfitting (remove KNN as it doesn't work well and softmax as it is similar to logistic regression).\n","\n","Training accuracy drops 15-20% across the models while validation accuracy only drops 5%. Clearly the initial models were overfitting."]},{"cell_type":"code","metadata":{"id":"C4JbY6wiYeoE","colab_type":"code","outputId":"60c30af8-d136-4b64-dfcd-0dc9fba5e01d","executionInfo":{"status":"ok","timestamp":1590707157442,"user_tz":-600,"elapsed":123310,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.svm import LinearSVC, SVC\n","\n","models = {\"Naive Bayes\" : MultinomialNB(),\n","          \"Logistic Reg\" : LogisticRegression(multi_class='ovr', max_iter=500, C=0.15),\n","          \"Linear SVM\" : LinearSVC(C=0.01),\n","          \"Non-Linear SVM\" : SVC(C=0.25),\n","          \"Random Forest\" : RandomForestClassifier(random_state=0, max_depth=25)}\n","\n","run_models(models, X_train, y_train, X_val, y_val)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Naive Bayes</th>\n","      <th>Logistic Reg</th>\n","      <th>Linear SVM</th>\n","      <th>Non-Linear SVM</th>\n","      <th>Random Forest</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Training data</th>\n","      <td>0.9119</td>\n","      <td>0.8187</td>\n","      <td>0.7608</td>\n","      <td>0.7857</td>\n","      <td>0.7754</td>\n","    </tr>\n","    <tr>\n","      <th>Validation data</th>\n","      <td>0.4342</td>\n","      <td>0.4288</td>\n","      <td>0.4123</td>\n","      <td>0.3904</td>\n","      <td>0.4096</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Naive Bayes  Logistic Reg  ...  Non-Linear SVM  Random Forest\n","Training data         0.9119        0.8187  ...          0.7857         0.7754\n","Validation data       0.4342        0.4288  ...          0.3904         0.4096\n","\n","[2 rows x 5 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"DyL8vQQWb6gA","colab_type":"text"},"source":["Tweaking the regularisation parameters is reducing overfitting but also reducing the validation error too much. Try early stopping to reduce overfitting. The below results show that the model starts overfitting after iteration ~31 when training accuracy is ~85% and validation accuracy ~45%."]},{"cell_type":"code","metadata":{"id":"ClLN1LiHjkCY","colab_type":"code","outputId":"882cd7c6-e213-472e-d75d-326323b8fdfd","executionInfo":{"status":"ok","timestamp":1590709914162,"user_tz":-600,"elapsed":6283,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":371}},"source":["# source: p142 of the textbook (chapter 4)\n","# SGDClassifier now has an early stopping option built in but it doesn't work how I want so use a manual implementation:\n","from sklearn.linear_model import SGDClassifier\n","\n","linear_svm2 = SGDClassifier(max_iter=1, warm_start=True, learning_rate='constant', eta0=0.0008)\n","\n","train_accs, val_accs = [], []\n","max_accuracy = 0\n","best_epoch = None\n","best_model = None\n","\n","num_iters = 50\n","for epoch in range(num_iters):\n","  linear_svm2.fit(X_train, y_train)\n","  train_acc, val_acc = accuracy_score(y_train, linear_svm2.predict(X_train)), accuracy_score(y_val, linear_svm2.predict(X_val))\n","  train_accs.append(train_acc)\n","  val_accs.append(val_acc)\n","\n","plt.plot(np.arange(1, num_iters+1), train_accs, label='Training acc');\n","plt.plot(np.arange(1, num_iters+1), val_accs, label='Val acc');\n","\n","plt.xlabel('Iteration'); plt.ylabel('Accuracy');\n","plt.ylim(0, 1.0);\n","plt.xticks(np.arange(1, num_iters+1, 5)); plt.yticks(np.arange(0, 1.05, 0.05));\n","plt.grid();\n","plt.legend();\n","max_acc, max_acc_iter = np.round(np.max(val_accs), 4), np.argmax(val_accs)+1\n","plt.vlines(x=max_acc_iter, ymin=0, ymax=1, color='gray', label='Max val acc');\n","plt.hlines(y=max_acc, xmin=0, xmax=num_iters+1, color='gray', label=None);\n","plt.annotate(max_acc, (max_acc_iter, max_acc), textcoords=\"offset points\", xytext=(0,0), ha='center')\n","\n","print('Max accuracy', max_acc, 'at epoch', max_acc_iter, \"\\n\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_stochastic_gradient.py:557: ConvergenceWarning: Maximum number of iteration reached before convergence. Consider increasing max_iter to improve the fit.\n","  ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["Max accuracy 0.4555 at epoch 50 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"uwTrFjKe4YbK"},"source":["Use grid search with the linear SVM to see if the model paramaters (and pre-processing parameters) can be tweaked to improve the model.\n","\n","Validation data is 1460 instances or ~17% of the total data set. Hence use 6 folds in cross validation so that 6th fold is essentially the validation set ('tweets_normalised_shuffled' is a concatenation of the shuffled training tweets and shuffled validation tweets)\n","\n","Result: accuracy on the first 5 folds (almost the same as the training set) varies from ~70-85% but the accuracy on the 6th fold (almost the entire validation set) varies from 43-48%. **There must be a data mistmatch.**"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590709848035,"user_tz":-600,"elapsed":77937,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"qglL757i4cyY","outputId":"119ad7a0-3fae-4dd1-bd5d-0f4170d82f55","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from sklearn.pipeline import Pipeline\n","from sklearn.model_selection import cross_val_score, GridSearchCV\n","\n","linearsvm_pipeline = Pipeline([\n","    ('tfidf', TfidfVectorizer()),\n","    ('svc', LinearSVC())\n","])\n","\n","linearsvm_grid = [{\n","    'tfidf__ngram_range':[(1,1), (1,2)],\n","    'tfidf__max_features':[500, 1000, 3500, 7000],\n","    'svc__C':[0.01, 0.1, 1, 10]\n","}]\n","\n","grid_search = GridSearchCV(linearsvm_pipeline, linearsvm_grid, cv=6, scoring='accuracy')\n","grid_search.fit(tweets_normalised_shuffled, y)\n","print(\"Best model based on CV scores:\", grid_search.best_params_, \"\\n\")\n","\n","results = grid_search.cv_results_\n","\n","all_scores = []\n","for i in range(0, 6):\n","  score_str = 'split' + str(i) + '_test_score'\n","  all_scores.append(np.round(results[score_str], 2))\n","\n","models_df = pd.DataFrame(results[\"params\"])\n","scores_df = pd.DataFrame(np.c_[np.array(all_scores).transpose(), np.round(results[\"mean_test_score\"], 2)],\n","                         columns=['1', '2', '3', '4', '5', '6', 'Avg'])\n","pd.concat([models_df, scores_df], axis=1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Best model based on CV scores: {'svc__C': 0.1, 'tfidf__max_features': 7000, 'tfidf__ngram_range': (1, 1)} \n","\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>svc__C</th>\n","      <th>tfidf__max_features</th>\n","      <th>tfidf__ngram_range</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>Avg</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.01</td>\n","      <td>500</td>\n","      <td>(1, 1)</td>\n","      <td>0.740</td>\n","      <td>0.751</td>\n","      <td>0.743</td>\n","      <td>0.721</td>\n","      <td>0.708</td>\n","      <td>0.470</td>\n","      <td>0.689</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.01</td>\n","      <td>500</td>\n","      <td>(1, 2)</td>\n","      <td>0.736</td>\n","      <td>0.737</td>\n","      <td>0.731</td>\n","      <td>0.719</td>\n","      <td>0.700</td>\n","      <td>0.473</td>\n","      <td>0.683</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.01</td>\n","      <td>1000</td>\n","      <td>(1, 1)</td>\n","      <td>0.755</td>\n","      <td>0.762</td>\n","      <td>0.766</td>\n","      <td>0.737</td>\n","      <td>0.712</td>\n","      <td>0.471</td>\n","      <td>0.701</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.01</td>\n","      <td>1000</td>\n","      <td>(1, 2)</td>\n","      <td>0.753</td>\n","      <td>0.760</td>\n","      <td>0.767</td>\n","      <td>0.738</td>\n","      <td>0.719</td>\n","      <td>0.469</td>\n","      <td>0.701</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.01</td>\n","      <td>3500</td>\n","      <td>(1, 1)</td>\n","      <td>0.720</td>\n","      <td>0.720</td>\n","      <td>0.711</td>\n","      <td>0.683</td>\n","      <td>0.671</td>\n","      <td>0.466</td>\n","      <td>0.662</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.01</td>\n","      <td>3500</td>\n","      <td>(1, 2)</td>\n","      <td>0.723</td>\n","      <td>0.718</td>\n","      <td>0.712</td>\n","      <td>0.684</td>\n","      <td>0.676</td>\n","      <td>0.468</td>\n","      <td>0.664</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.01</td>\n","      <td>7000</td>\n","      <td>(1, 1)</td>\n","      <td>0.696</td>\n","      <td>0.691</td>\n","      <td>0.683</td>\n","      <td>0.656</td>\n","      <td>0.647</td>\n","      <td>0.463</td>\n","      <td>0.639</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.01</td>\n","      <td>7000</td>\n","      <td>(1, 2)</td>\n","      <td>0.704</td>\n","      <td>0.710</td>\n","      <td>0.692</td>\n","      <td>0.665</td>\n","      <td>0.650</td>\n","      <td>0.461</td>\n","      <td>0.647</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.10</td>\n","      <td>500</td>\n","      <td>(1, 1)</td>\n","      <td>0.763</td>\n","      <td>0.780</td>\n","      <td>0.769</td>\n","      <td>0.743</td>\n","      <td>0.717</td>\n","      <td>0.471</td>\n","      <td>0.707</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.10</td>\n","      <td>500</td>\n","      <td>(1, 2)</td>\n","      <td>0.755</td>\n","      <td>0.762</td>\n","      <td>0.756</td>\n","      <td>0.737</td>\n","      <td>0.709</td>\n","      <td>0.472</td>\n","      <td>0.699</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.10</td>\n","      <td>1000</td>\n","      <td>(1, 1)</td>\n","      <td>0.821</td>\n","      <td>0.837</td>\n","      <td>0.839</td>\n","      <td>0.805</td>\n","      <td>0.777</td>\n","      <td>0.482</td>\n","      <td>0.760</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.10</td>\n","      <td>1000</td>\n","      <td>(1, 2)</td>\n","      <td>0.814</td>\n","      <td>0.828</td>\n","      <td>0.836</td>\n","      <td>0.804</td>\n","      <td>0.775</td>\n","      <td>0.485</td>\n","      <td>0.757</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.10</td>\n","      <td>3500</td>\n","      <td>(1, 1)</td>\n","      <td>0.851</td>\n","      <td>0.863</td>\n","      <td>0.862</td>\n","      <td>0.830</td>\n","      <td>0.804</td>\n","      <td>0.488</td>\n","      <td>0.783</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.10</td>\n","      <td>3500</td>\n","      <td>(1, 2)</td>\n","      <td>0.848</td>\n","      <td>0.855</td>\n","      <td>0.862</td>\n","      <td>0.825</td>\n","      <td>0.803</td>\n","      <td>0.485</td>\n","      <td>0.780</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0.10</td>\n","      <td>7000</td>\n","      <td>(1, 1)</td>\n","      <td>0.854</td>\n","      <td>0.866</td>\n","      <td>0.868</td>\n","      <td>0.834</td>\n","      <td>0.807</td>\n","      <td>0.484</td>\n","      <td>0.785</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.10</td>\n","      <td>7000</td>\n","      <td>(1, 2)</td>\n","      <td>0.853</td>\n","      <td>0.859</td>\n","      <td>0.867</td>\n","      <td>0.834</td>\n","      <td>0.806</td>\n","      <td>0.483</td>\n","      <td>0.784</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>1.00</td>\n","      <td>500</td>\n","      <td>(1, 1)</td>\n","      <td>0.761</td>\n","      <td>0.769</td>\n","      <td>0.771</td>\n","      <td>0.731</td>\n","      <td>0.713</td>\n","      <td>0.465</td>\n","      <td>0.702</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>1.00</td>\n","      <td>500</td>\n","      <td>(1, 2)</td>\n","      <td>0.759</td>\n","      <td>0.755</td>\n","      <td>0.750</td>\n","      <td>0.726</td>\n","      <td>0.710</td>\n","      <td>0.464</td>\n","      <td>0.694</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>1.00</td>\n","      <td>1000</td>\n","      <td>(1, 1)</td>\n","      <td>0.805</td>\n","      <td>0.820</td>\n","      <td>0.825</td>\n","      <td>0.792</td>\n","      <td>0.767</td>\n","      <td>0.469</td>\n","      <td>0.746</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>1.00</td>\n","      <td>1000</td>\n","      <td>(1, 2)</td>\n","      <td>0.798</td>\n","      <td>0.819</td>\n","      <td>0.823</td>\n","      <td>0.787</td>\n","      <td>0.762</td>\n","      <td>0.470</td>\n","      <td>0.743</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>1.00</td>\n","      <td>3500</td>\n","      <td>(1, 1)</td>\n","      <td>0.832</td>\n","      <td>0.849</td>\n","      <td>0.850</td>\n","      <td>0.830</td>\n","      <td>0.804</td>\n","      <td>0.463</td>\n","      <td>0.771</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>1.00</td>\n","      <td>3500</td>\n","      <td>(1, 2)</td>\n","      <td>0.835</td>\n","      <td>0.844</td>\n","      <td>0.845</td>\n","      <td>0.823</td>\n","      <td>0.792</td>\n","      <td>0.459</td>\n","      <td>0.766</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>1.00</td>\n","      <td>7000</td>\n","      <td>(1, 1)</td>\n","      <td>0.856</td>\n","      <td>0.865</td>\n","      <td>0.867</td>\n","      <td>0.849</td>\n","      <td>0.811</td>\n","      <td>0.461</td>\n","      <td>0.785</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>1.00</td>\n","      <td>7000</td>\n","      <td>(1, 2)</td>\n","      <td>0.847</td>\n","      <td>0.856</td>\n","      <td>0.865</td>\n","      <td>0.841</td>\n","      <td>0.813</td>\n","      <td>0.452</td>\n","      <td>0.779</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>10.00</td>\n","      <td>500</td>\n","      <td>(1, 1)</td>\n","      <td>0.757</td>\n","      <td>0.767</td>\n","      <td>0.769</td>\n","      <td>0.733</td>\n","      <td>0.710</td>\n","      <td>0.463</td>\n","      <td>0.700</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>10.00</td>\n","      <td>500</td>\n","      <td>(1, 2)</td>\n","      <td>0.755</td>\n","      <td>0.752</td>\n","      <td>0.743</td>\n","      <td>0.723</td>\n","      <td>0.708</td>\n","      <td>0.462</td>\n","      <td>0.691</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>10.00</td>\n","      <td>1000</td>\n","      <td>(1, 1)</td>\n","      <td>0.788</td>\n","      <td>0.806</td>\n","      <td>0.813</td>\n","      <td>0.772</td>\n","      <td>0.740</td>\n","      <td>0.451</td>\n","      <td>0.728</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>10.00</td>\n","      <td>1000</td>\n","      <td>(1, 2)</td>\n","      <td>0.781</td>\n","      <td>0.803</td>\n","      <td>0.809</td>\n","      <td>0.768</td>\n","      <td>0.746</td>\n","      <td>0.458</td>\n","      <td>0.728</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>10.00</td>\n","      <td>3500</td>\n","      <td>(1, 1)</td>\n","      <td>0.795</td>\n","      <td>0.806</td>\n","      <td>0.802</td>\n","      <td>0.788</td>\n","      <td>0.769</td>\n","      <td>0.435</td>\n","      <td>0.733</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>10.00</td>\n","      <td>3500</td>\n","      <td>(1, 2)</td>\n","      <td>0.791</td>\n","      <td>0.803</td>\n","      <td>0.812</td>\n","      <td>0.785</td>\n","      <td>0.760</td>\n","      <td>0.433</td>\n","      <td>0.731</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>10.00</td>\n","      <td>7000</td>\n","      <td>(1, 1)</td>\n","      <td>0.809</td>\n","      <td>0.822</td>\n","      <td>0.811</td>\n","      <td>0.812</td>\n","      <td>0.778</td>\n","      <td>0.445</td>\n","      <td>0.746</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>10.00</td>\n","      <td>7000</td>\n","      <td>(1, 2)</td>\n","      <td>0.830</td>\n","      <td>0.834</td>\n","      <td>0.844</td>\n","      <td>0.813</td>\n","      <td>0.795</td>\n","      <td>0.433</td>\n","      <td>0.758</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    svc__C  tfidf__max_features tfidf__ngram_range  ...      5      6    Avg\n","0     0.01                  500             (1, 1)  ...  0.708  0.470  0.689\n","1     0.01                  500             (1, 2)  ...  0.700  0.473  0.683\n","2     0.01                 1000             (1, 1)  ...  0.712  0.471  0.701\n","3     0.01                 1000             (1, 2)  ...  0.719  0.469  0.701\n","4     0.01                 3500             (1, 1)  ...  0.671  0.466  0.662\n","5     0.01                 3500             (1, 2)  ...  0.676  0.468  0.664\n","6     0.01                 7000             (1, 1)  ...  0.647  0.463  0.639\n","7     0.01                 7000             (1, 2)  ...  0.650  0.461  0.647\n","8     0.10                  500             (1, 1)  ...  0.717  0.471  0.707\n","9     0.10                  500             (1, 2)  ...  0.709  0.472  0.699\n","10    0.10                 1000             (1, 1)  ...  0.777  0.482  0.760\n","11    0.10                 1000             (1, 2)  ...  0.775  0.485  0.757\n","12    0.10                 3500             (1, 1)  ...  0.804  0.488  0.783\n","13    0.10                 3500             (1, 2)  ...  0.803  0.485  0.780\n","14    0.10                 7000             (1, 1)  ...  0.807  0.484  0.785\n","15    0.10                 7000             (1, 2)  ...  0.806  0.483  0.784\n","16    1.00                  500             (1, 1)  ...  0.713  0.465  0.702\n","17    1.00                  500             (1, 2)  ...  0.710  0.464  0.694\n","18    1.00                 1000             (1, 1)  ...  0.767  0.469  0.746\n","19    1.00                 1000             (1, 2)  ...  0.762  0.470  0.743\n","20    1.00                 3500             (1, 1)  ...  0.804  0.463  0.771\n","21    1.00                 3500             (1, 2)  ...  0.792  0.459  0.766\n","22    1.00                 7000             (1, 1)  ...  0.811  0.461  0.785\n","23    1.00                 7000             (1, 2)  ...  0.813  0.452  0.779\n","24   10.00                  500             (1, 1)  ...  0.710  0.463  0.700\n","25   10.00                  500             (1, 2)  ...  0.708  0.462  0.691\n","26   10.00                 1000             (1, 1)  ...  0.740  0.451  0.728\n","27   10.00                 1000             (1, 2)  ...  0.746  0.458  0.728\n","28   10.00                 3500             (1, 1)  ...  0.769  0.435  0.733\n","29   10.00                 3500             (1, 2)  ...  0.760  0.433  0.731\n","30   10.00                 7000             (1, 1)  ...  0.778  0.445  0.746\n","31   10.00                 7000             (1, 2)  ...  0.795  0.433  0.758\n","\n","[32 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"wN2EA3vLrsTJ"},"source":["Kaggle returns a score of 60% for the linear svm from above on the test data. The model is trained on the full data (training + validation) so is better than the model trained on the training data only."]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590707217412,"user_tz":-600,"elapsed":183203,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"xQ7eCLLZrsoj","outputId":"03074379-abed-4b01-e2fd-bb597746146c","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def create_submission_file(model, X, y, X_test):\n","  model.fit(X, y)\n","  y_test_predict_np = np.c_[np.array(range(1, 4065)).astype(int), model.predict(X_test)]\n","  y_test_predict = pd.DataFrame(y_test_predict_np, columns=[\"ID\", \"Prediction\"])\n","  y_test_predict.to_csv(join(dataset_directory, \"42592380-conv.csv\"), index=False)\n","  return accuracy_score(y, model.predict(X))\n","\n","# create_submission_file(models['Linear SVM'], X, y, X_test)\n","create_submission_file(grid_search.best_estimator_, tweets_normalised_shuffled, y, tweets_test_normalised)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8673755550362234"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"IDXE6Z9VePR8"},"source":["Perform error analysis on the validation set using a selection of the candidate models to see what is going wrong with the predictions on the validation set. Per output from the below code cell:\n","\n","- All models have higher accuracy/recall on fear and joy than anger and sadness and low accuracy/recall (30-40%) on sadness\n","- The error patterns are similar. A voting classifier may not be beneficial.\n","- The fear class has low precision, i.e. many non-fear tweets are mistakenly classified as fear (over 40% of anger and sadness tweets in most models).\n","- **The decision boundary estimated from the training data separates the classes almost perfectly in the training data but poorly in the validation set. The features deemed significant in predicting the emotions have not generalised well to the validation set (i.e. the model has overfit to features that define fear in the training set but are related to other emotions in the validation set).**"]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590707218097,"user_tz":-600,"elapsed":183866,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"QIzkqbFGbiBo","outputId":"e152d1bf-7332-4600-d0d5-50998f000a01","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["from sklearn.metrics import confusion_matrix\n","\n","for model_name in ['Naive Bayes', 'Logistic Reg', 'Linear SVM', 'Random Forest']:\n","  model = models[model_name]\n","  y_val_predict = model.predict(X_val)\n","  cmtrx = confusion_matrix(y_val, y_val_predict)\n","\n","  cmtrx = cmtrx / cmtrx.sum(axis=1, keepdims=True)\n","  df = pd.DataFrame(np.round(cmtrx,2), columns=[[model_name] * 4, [\"Predicted\"] * 4, emotions], \n","                       index=[[\"Actual\"] * 4, emotions])\n","  display(df)\n","  print(\"\\n\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Naive Bayes</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Predicted</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th>anger</th>\n","      <th>fear</th>\n","      <th>joy</th>\n","      <th>sadness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">Actual</th>\n","      <th>anger</th>\n","      <td>0.38</td>\n","      <td>0.42</td>\n","      <td>0.06</td>\n","      <td>0.13</td>\n","    </tr>\n","    <tr>\n","      <th>fear</th>\n","      <td>0.18</td>\n","      <td>0.64</td>\n","      <td>0.05</td>\n","      <td>0.13</td>\n","    </tr>\n","    <tr>\n","      <th>joy</th>\n","      <td>0.10</td>\n","      <td>0.34</td>\n","      <td>0.47</td>\n","      <td>0.09</td>\n","    </tr>\n","    <tr>\n","      <th>sadness</th>\n","      <td>0.20</td>\n","      <td>0.47</td>\n","      <td>0.07</td>\n","      <td>0.26</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Naive Bayes                    \n","                 Predicted                    \n","                     anger  fear   joy sadness\n","Actual anger          0.38  0.42  0.06    0.13\n","       fear           0.18  0.64  0.05    0.13\n","       joy            0.10  0.34  0.47    0.09\n","       sadness        0.20  0.47  0.07    0.26"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Logistic Reg</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Predicted</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th>anger</th>\n","      <th>fear</th>\n","      <th>joy</th>\n","      <th>sadness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">Actual</th>\n","      <th>anger</th>\n","      <td>0.33</td>\n","      <td>0.52</td>\n","      <td>0.04</td>\n","      <td>0.11</td>\n","    </tr>\n","    <tr>\n","      <th>fear</th>\n","      <td>0.14</td>\n","      <td>0.73</td>\n","      <td>0.03</td>\n","      <td>0.10</td>\n","    </tr>\n","    <tr>\n","      <th>joy</th>\n","      <td>0.04</td>\n","      <td>0.49</td>\n","      <td>0.42</td>\n","      <td>0.04</td>\n","    </tr>\n","    <tr>\n","      <th>sadness</th>\n","      <td>0.14</td>\n","      <td>0.58</td>\n","      <td>0.04</td>\n","      <td>0.24</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Logistic Reg                    \n","                  Predicted                    \n","                      anger  fear   joy sadness\n","Actual anger           0.33  0.52  0.04    0.11\n","       fear            0.14  0.73  0.03    0.10\n","       joy             0.04  0.49  0.42    0.04\n","       sadness         0.14  0.58  0.04    0.24"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Linear SVM</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Predicted</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th>anger</th>\n","      <th>fear</th>\n","      <th>joy</th>\n","      <th>sadness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">Actual</th>\n","      <th>anger</th>\n","      <td>0.26</td>\n","      <td>0.62</td>\n","      <td>0.03</td>\n","      <td>0.08</td>\n","    </tr>\n","    <tr>\n","      <th>fear</th>\n","      <td>0.11</td>\n","      <td>0.79</td>\n","      <td>0.03</td>\n","      <td>0.07</td>\n","    </tr>\n","    <tr>\n","      <th>joy</th>\n","      <td>0.04</td>\n","      <td>0.53</td>\n","      <td>0.40</td>\n","      <td>0.03</td>\n","    </tr>\n","    <tr>\n","      <th>sadness</th>\n","      <td>0.12</td>\n","      <td>0.65</td>\n","      <td>0.04</td>\n","      <td>0.20</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Linear SVM                    \n","                Predicted                    \n","                    anger  fear   joy sadness\n","Actual anger         0.26  0.62  0.03    0.08\n","       fear          0.11  0.79  0.03    0.07\n","       joy           0.04  0.53  0.40    0.03\n","       sadness       0.12  0.65  0.04    0.20"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Random Forest</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th colspan=\"4\" halign=\"left\">Predicted</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th>anger</th>\n","      <th>fear</th>\n","      <th>joy</th>\n","      <th>sadness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">Actual</th>\n","      <th>anger</th>\n","      <td>0.24</td>\n","      <td>0.64</td>\n","      <td>0.02</td>\n","      <td>0.11</td>\n","    </tr>\n","    <tr>\n","      <th>fear</th>\n","      <td>0.10</td>\n","      <td>0.78</td>\n","      <td>0.02</td>\n","      <td>0.10</td>\n","    </tr>\n","    <tr>\n","      <th>joy</th>\n","      <td>0.02</td>\n","      <td>0.57</td>\n","      <td>0.36</td>\n","      <td>0.04</td>\n","    </tr>\n","    <tr>\n","      <th>sadness</th>\n","      <td>0.10</td>\n","      <td>0.63</td>\n","      <td>0.03</td>\n","      <td>0.25</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               Random Forest                    \n","                   Predicted                    \n","                       anger  fear   joy sadness\n","Actual anger            0.24  0.64  0.02    0.11\n","       fear             0.10  0.78  0.02    0.10\n","       joy              0.02  0.57  0.36    0.04\n","       sadness          0.10  0.63  0.03    0.25"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"vOkhzAKVr3cj"},"source":["Most important features are determined from the Logistic Regression to see if the model is giving significane to noise rather than true signals. The 10 most informative features for each emotion are displayed. The results make sense. However, some of the top words for fear such as 'awful' 'terrible' 'horrible' could easily be associated with anger or sadness."]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590707218098,"user_tz":-600,"elapsed":183841,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"DzUPGpwdId7x","outputId":"faf34f7b-4ac3-4f95-bd9e-ef7381bdb3ed","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# This idea came from:\n","# https://towardsdatascience.com/how-i-improved-my-text-classification-model-with-feature-engineering-98fbe6c13ef3\n","\n","feature_names = np.array(tfidf_train.get_feature_names()).reshape(-1,1)\n","\n","# make sure the model is the original one\n","lr_clf = LogisticRegression(multi_class='ovr', max_iter=500)\n","lr_clf.fit(X_train, y_train)\n","weights = np.round(lr_clf.coef_.transpose(), 3)\n","\n","feature_importances = pd.DataFrame(weights, columns=emotions)\n","feature_importances.insert(0, 'Feature', feature_names)\n","\n","for emotion in emotions:\n","  display(feature_importances.nlargest(10, emotion)[['Feature', emotion]])\n","  print(\"\\n\")"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>anger</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2132</th>\n","      <td>offend</td>\n","      <td>6.193</td>\n","    </tr>\n","    <tr>\n","      <th>95</th>\n","      <td>angry</td>\n","      <td>5.804</td>\n","    </tr>\n","    <tr>\n","      <th>89</th>\n","      <td>anger</td>\n","      <td>5.786</td>\n","    </tr>\n","    <tr>\n","      <th>2455</th>\n","      <td>rage</td>\n","      <td>5.619</td>\n","    </tr>\n","    <tr>\n","      <th>267</th>\n","      <td>bitter</td>\n","      <td>5.587</td>\n","    </tr>\n","    <tr>\n","      <th>2556</th>\n","      <td>revenge</td>\n","      <td>5.453</td>\n","    </tr>\n","    <tr>\n","      <th>1119</th>\n","      <td>fume</td>\n","      <td>5.076</td>\n","    </tr>\n","    <tr>\n","      <th>2185</th>\n","      <td>outrage</td>\n","      <td>4.816</td>\n","    </tr>\n","    <tr>\n","      <th>2930</th>\n","      <td>sting</td>\n","      <td>4.705</td>\n","    </tr>\n","    <tr>\n","      <th>2826</th>\n","      <td>snap</td>\n","      <td>4.544</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      Feature  anger\n","2132   offend  6.193\n","95      angry  5.804\n","89      anger  5.786\n","2455     rage  5.619\n","267    bitter  5.587\n","2556  revenge  5.453\n","1119     fume  5.076\n","2185  outrage  4.816\n","2930    sting  4.705\n","2826     snap  4.544"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>fear</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>993</th>\n","      <td>fear</td>\n","      <td>5.211</td>\n","    </tr>\n","    <tr>\n","      <th>2025</th>\n","      <td>nervous</td>\n","      <td>5.182</td>\n","    </tr>\n","    <tr>\n","      <th>185</th>\n","      <td>awful</td>\n","      <td>5.173</td>\n","    </tr>\n","    <tr>\n","      <th>2062</th>\n","      <td>nightmare</td>\n","      <td>5.088</td>\n","    </tr>\n","    <tr>\n","      <th>2727</th>\n","      <td>shake</td>\n","      <td>5.020</td>\n","    </tr>\n","    <tr>\n","      <th>356</th>\n","      <td>bully</td>\n","      <td>4.945</td>\n","    </tr>\n","    <tr>\n","      <th>3050</th>\n","      <td>terrible</td>\n","      <td>4.901</td>\n","    </tr>\n","    <tr>\n","      <th>3057</th>\n","      <td>terrorism</td>\n","      <td>4.873</td>\n","    </tr>\n","    <tr>\n","      <th>1450</th>\n","      <td>horrible</td>\n","      <td>4.814</td>\n","    </tr>\n","    <tr>\n","      <th>1454</th>\n","      <td>horror</td>\n","      <td>4.753</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Feature   fear\n","993        fear  5.211\n","2025    nervous  5.182\n","185       awful  5.173\n","2062  nightmare  5.088\n","2727      shake  5.020\n","356       bully  4.945\n","3050   terrible  4.901\n","3057  terrorism  4.873\n","1450   horrible  4.814\n","1454     horror  4.753"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>joy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1421</th>\n","      <td>hilarious</td>\n","      <td>6.018</td>\n","    </tr>\n","    <tr>\n","      <th>2515</th>\n","      <td>rejoice</td>\n","      <td>5.938</td>\n","    </tr>\n","    <tr>\n","      <th>2811</th>\n","      <td>smile</td>\n","      <td>5.809</td>\n","    </tr>\n","    <tr>\n","      <th>2166</th>\n","      <td>optimism</td>\n","      <td>5.801</td>\n","    </tr>\n","    <tr>\n","      <th>455</th>\n","      <td>cheer</td>\n","      <td>5.774</td>\n","    </tr>\n","    <tr>\n","      <th>1344</th>\n","      <td>happy</td>\n","      <td>5.135</td>\n","    </tr>\n","    <tr>\n","      <th>1669</th>\n","      <td>laughter</td>\n","      <td>5.126</td>\n","    </tr>\n","    <tr>\n","      <th>1194</th>\n","      <td>glee</td>\n","      <td>5.082</td>\n","    </tr>\n","    <tr>\n","      <th>1744</th>\n","      <td>lively</td>\n","      <td>4.782</td>\n","    </tr>\n","    <tr>\n","      <th>2315</th>\n","      <td>playful</td>\n","      <td>4.417</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Feature    joy\n","1421  hilarious  6.018\n","2515    rejoice  5.938\n","2811      smile  5.809\n","2166   optimism  5.801\n","455       cheer  5.774\n","1344      happy  5.135\n","1669   laughter  5.126\n","1194       glee  5.082\n","1744     lively  4.782\n","2315    playful  4.417"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>sadness</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>287</th>\n","      <td>blue</td>\n","      <td>6.317</td>\n","    </tr>\n","    <tr>\n","      <th>707</th>\n","      <td>depression</td>\n","      <td>5.925</td>\n","    </tr>\n","    <tr>\n","      <th>2833</th>\n","      <td>sober</td>\n","      <td>5.883</td>\n","    </tr>\n","    <tr>\n","      <th>704</th>\n","      <td>depress</td>\n","      <td>5.717</td>\n","    </tr>\n","    <tr>\n","      <th>2616</th>\n","      <td>sadness</td>\n","      <td>5.644</td>\n","    </tr>\n","    <tr>\n","      <th>3261</th>\n","      <td>unhappy</td>\n","      <td>5.500</td>\n","    </tr>\n","    <tr>\n","      <th>2611</th>\n","      <td>sad</td>\n","      <td>5.412</td>\n","    </tr>\n","    <tr>\n","      <th>657</th>\n","      <td>dark</td>\n","      <td>5.379</td>\n","    </tr>\n","    <tr>\n","      <th>2784</th>\n","      <td>sink</td>\n","      <td>5.247</td>\n","    </tr>\n","    <tr>\n","      <th>2712</th>\n","      <td>serious</td>\n","      <td>5.111</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Feature  sadness\n","287         blue    6.317\n","707   depression    5.925\n","2833       sober    5.883\n","704      depress    5.717\n","2616     sadness    5.644\n","3261     unhappy    5.500\n","2611         sad    5.412\n","657         dark    5.379\n","2784        sink    5.247\n","2712     serious    5.111"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"Up2ttmIQwx-i"},"source":["Look more closely at some of the errors. I include results from NLTK sentiment analyzer for comparison (final 4 columns in the data frame).\n","\n","The data is shuffled so there will be different results everytime. In the following cell I analyse the results for some selected tweets. In general, my classifier is very uncertain based on the class probabilities."]},{"cell_type":"code","metadata":{"id":"ehhzsKWpGrAZ","colab_type":"code","colab":{}},"source":["# The 'neg', 'neu', 'pos', 'compound' columns are from NLTK SentimentIntensityAnalyzer\n","\n","# These tweets are very ambiguous! The classifier is rightly confused (although NLTK is very confident about the first one)\n","#       anger\tfear\tjoy\t  sad   Actual\tPredict neg\t   neu\t  pos\t   compound  tweet\n","# 188\t  0.09\t0.6\t  0.14\t0.17\tjoy\t    fear\t  0.193  0.247  0.560  0.8720    one great horrible moment professor see wonderful student leave university true passion '\n","# 184\t  0.07\t0.81\t0.05\t0.06\tjoy\t    fear\t  0.462  0.220  0.319\t -0.3818   thanks someone suffer anxiety migraine always fear give hope\t\n","\n","# Not sure which word/s my classifier found 'fearful' in this tweet? NLTK rightly says it is positive sentiment.\n","#       anger\tfear\tjoy\t  sad   Actual\tPredict neg\t   neu\t  pos\t   compound  tweet\n","# 234\t  0.13\t0.33\t0.3\t  0.24\tjoy\t    fear\t  0.000  0.349  0.651\t 0.6808    work help make world good\t\n","\n","# There are no emotion words in this tweet so not sure what the classifier is seeing?\n","#       anger\tfear\tjoy\t  sad   Actual\tPredict neg\t   neu\t  pos\t   compound  tweet\n","# 287\t  0.13\t0.66\t0.09\t0.12\tjoy\t    fear\t  0.000  1.000  0.000\t 0.0000    someone need start listen idea\t\n","\n","# Is the following tweet actually joyful? I think my classifier has it more right than the official label here\n","#       anger\tfear\tjoy\t  sad   Actual\tPredict neg\t   neu\t  pos\t   compound  tweet\n","# 471\t  0.12\t0.71\t0.08\t0.08\tjoy\t    fear\t  0.404  0.596  0.000\t -0.2584   never excited start semester\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"PPDH3qxyBfpb","colab_type":"code","outputId":"689454a7-af71-4ae9-ef9e-e7f1eb546dd0","executionInfo":{"status":"ok","timestamp":1590732022035,"user_tz":-600,"elapsed":1258,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":88}},"source":["nltk.download('vader_lexicon')\n","from nltk.sentiment.vader import SentimentIntensityAnalyzer\n","sid = SentimentIntensityAnalyzer()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package vader_lexicon to /root/nltk_data...\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/nltk/twitter/__init__.py:20: UserWarning: The twython library has not been installed. Some functionality from the twitter package will not be available.\n","  warnings.warn(\"The twython library has not been installed. \"\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590651118549,"user_tz":-600,"elapsed":1658,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"DKQ2FTFhwthR","outputId":"c18f4694-3d2d-41b7-f20e-c1690d661972","colab":{"base_uri":"https://localhost:8080/","height":669}},"source":["logreg_clf = LogisticRegression(multi_class='ovr', max_iter=500)\n","logreg_clf.fit(X_train, y_train)\n","y_val_predict = logreg_clf.predict(X_val)\n","\n","num_tweets = 1000\n","decision_scores = np.round(logreg_clf.predict_proba(X_val)[:num_tweets], 2)\n","actual_emotions = [emotions[int(emotion_num)] for emotion_num in y_val[:num_tweets]]\n","predicted_emotions = [emotions[int(emotion_num)] for emotion_num in y_val_predict[:num_tweets]]\n","tweets = tweets_val_normalised_shuffled[:num_tweets]\n","\n","polarity_scores = []\n","for tweet in tweets:\n","  polarity_score = sid.polarity_scores(tweet)\n","  polarity_scores.append(polarity_score)\n","\n","pred_df = pd.DataFrame(np.c_[decision_scores, actual_emotions, predicted_emotions, tweets], columns = emotions + ['Actual', 'Predicted', 'Tweet'])\n","final_df = pd.concat([pred_df, pd.DataFrame(polarity_scores)], axis=1)\n","final_df.loc[(final_df['Actual']=='joy') & (final_df['Predicted'] != 'joy'), :][:20]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>anger</th>\n","      <th>fear</th>\n","      <th>joy</th>\n","      <th>sadness</th>\n","      <th>Actual</th>\n","      <th>Predicted</th>\n","      <th>Tweet</th>\n","      <th>neg</th>\n","      <th>neu</th>\n","      <th>pos</th>\n","      <th>compound</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0.32</td>\n","      <td>0.22</td>\n","      <td>0.18</td>\n","      <td>0.28</td>\n","      <td>joy</td>\n","      <td>anger</td>\n","      <td>whenever turn radio hear bob dylan knock heave...</td>\n","      <td>0.210</td>\n","      <td>0.484</td>\n","      <td>0.306</td>\n","      <td>0.2023</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.08</td>\n","      <td>0.25</td>\n","      <td>0.24</td>\n","      <td>0.42</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>sad tonight awhile back hope everyone attend g...</td>\n","      <td>0.193</td>\n","      <td>0.373</td>\n","      <td>0.435</td>\n","      <td>0.5994</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.18</td>\n","      <td>0.48</td>\n","      <td>0.26</td>\n","      <td>0.08</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>movie watch list spider man homecoming war pla...</td>\n","      <td>0.239</td>\n","      <td>0.613</td>\n","      <td>0.147</td>\n","      <td>-0.3612</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>0.47</td>\n","      <td>0.22</td>\n","      <td>0.14</td>\n","      <td>0.16</td>\n","      <td>joy</td>\n","      <td>anger</td>\n","      <td>get free machine</td>\n","      <td>0.000</td>\n","      <td>0.377</td>\n","      <td>0.623</td>\n","      <td>0.5106</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>0.19</td>\n","      <td>0.31</td>\n","      <td>0.17</td>\n","      <td>0.33</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>edit photo</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>0.000</td>\n","      <td>0.0000</td>\n","    </tr>\n","    <tr>\n","      <th>56</th>\n","      <td>0.08</td>\n","      <td>0.46</td>\n","      <td>0.33</td>\n","      <td>0.13</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>literally work almost everyday wait start bles...</td>\n","      <td>0.000</td>\n","      <td>0.741</td>\n","      <td>0.259</td>\n","      <td>0.4215</td>\n","    </tr>\n","    <tr>\n","      <th>67</th>\n","      <td>0.71</td>\n","      <td>0.08</td>\n","      <td>0.17</td>\n","      <td>0.04</td>\n","      <td>joy</td>\n","      <td>anger</td>\n","      <td>make angry laugh tweet</td>\n","      <td>0.371</td>\n","      <td>0.225</td>\n","      <td>0.404</td>\n","      <td>0.0772</td>\n","    </tr>\n","    <tr>\n","      <th>70</th>\n","      <td>0.18</td>\n","      <td>0.2</td>\n","      <td>0.08</td>\n","      <td>0.54</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>sad ultimately apparently support completely m...</td>\n","      <td>0.287</td>\n","      <td>0.463</td>\n","      <td>0.250</td>\n","      <td>-0.1027</td>\n","    </tr>\n","    <tr>\n","      <th>77</th>\n","      <td>0.28</td>\n","      <td>0.17</td>\n","      <td>0.16</td>\n","      <td>0.38</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>come damn boy joke stay great actual job thumb...</td>\n","      <td>0.169</td>\n","      <td>0.438</td>\n","      <td>0.394</td>\n","      <td>0.5574</td>\n","    </tr>\n","    <tr>\n","      <th>84</th>\n","      <td>0.13</td>\n","      <td>0.26</td>\n","      <td>0.24</td>\n","      <td>0.36</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>bedtime full listen reed album full album unde...</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>0.000</td>\n","      <td>0.0000</td>\n","    </tr>\n","    <tr>\n","      <th>86</th>\n","      <td>0.08</td>\n","      <td>0.74</td>\n","      <td>0.1</td>\n","      <td>0.08</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>admin search start friday repeat excited</td>\n","      <td>0.000</td>\n","      <td>0.676</td>\n","      <td>0.324</td>\n","      <td>0.3400</td>\n","    </tr>\n","    <tr>\n","      <th>104</th>\n","      <td>0.23</td>\n","      <td>0.33</td>\n","      <td>0.2</td>\n","      <td>0.23</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>teacher attempt teach without inspire desire l...</td>\n","      <td>0.467</td>\n","      <td>0.533</td>\n","      <td>0.000</td>\n","      <td>-0.6435</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>0.24</td>\n","      <td>0.24</td>\n","      <td>0.21</td>\n","      <td>0.31</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>unto shall unto laugh shall time</td>\n","      <td>0.000</td>\n","      <td>0.581</td>\n","      <td>0.419</td>\n","      <td>0.5574</td>\n","    </tr>\n","    <tr>\n","      <th>113</th>\n","      <td>0.08</td>\n","      <td>0.76</td>\n","      <td>0.08</td>\n","      <td>0.08</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>beautiful dear know benefit india do terror at...</td>\n","      <td>0.342</td>\n","      <td>0.158</td>\n","      <td>0.500</td>\n","      <td>0.4588</td>\n","    </tr>\n","    <tr>\n","      <th>134</th>\n","      <td>0.25</td>\n","      <td>0.3</td>\n","      <td>0.23</td>\n","      <td>0.22</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>could talk catfish tinder person_tipping_hand ...</td>\n","      <td>0.145</td>\n","      <td>0.598</td>\n","      <td>0.256</td>\n","      <td>0.3182</td>\n","    </tr>\n","    <tr>\n","      <th>150</th>\n","      <td>0.27</td>\n","      <td>0.34</td>\n","      <td>0.25</td>\n","      <td>0.14</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>grinning_squinting_face</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>0.000</td>\n","      <td>0.0000</td>\n","    </tr>\n","    <tr>\n","      <th>152</th>\n","      <td>0.23</td>\n","      <td>0.32</td>\n","      <td>0.11</td>\n","      <td>0.34</td>\n","      <td>joy</td>\n","      <td>sadness</td>\n","      <td>man stun one point head go</td>\n","      <td>0.000</td>\n","      <td>1.000</td>\n","      <td>0.000</td>\n","      <td>0.0000</td>\n","    </tr>\n","    <tr>\n","      <th>159</th>\n","      <td>0.35</td>\n","      <td>0.34</td>\n","      <td>0.17</td>\n","      <td>0.14</td>\n","      <td>joy</td>\n","      <td>anger</td>\n","      <td>go youtube watched reaction old pic thanks</td>\n","      <td>0.000</td>\n","      <td>0.674</td>\n","      <td>0.326</td>\n","      <td>0.4404</td>\n","    </tr>\n","    <tr>\n","      <th>177</th>\n","      <td>0.17</td>\n","      <td>0.38</td>\n","      <td>0.13</td>\n","      <td>0.32</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>think music seriously mother someday</td>\n","      <td>0.298</td>\n","      <td>0.702</td>\n","      <td>0.000</td>\n","      <td>-0.1779</td>\n","    </tr>\n","    <tr>\n","      <th>184</th>\n","      <td>0.07</td>\n","      <td>0.81</td>\n","      <td>0.05</td>\n","      <td>0.06</td>\n","      <td>joy</td>\n","      <td>fear</td>\n","      <td>thanks someone suffer anxiety migraine always ...</td>\n","      <td>0.462</td>\n","      <td>0.220</td>\n","      <td>0.319</td>\n","      <td>-0.3818</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    anger  fear   joy sadness  ...    neg    neu    pos  compound\n","1    0.32  0.22  0.18    0.28  ...  0.210  0.484  0.306    0.2023\n","4    0.08  0.25  0.24    0.42  ...  0.193  0.373  0.435    0.5994\n","15   0.18  0.48  0.26    0.08  ...  0.239  0.613  0.147   -0.3612\n","26   0.47  0.22  0.14    0.16  ...  0.000  0.377  0.623    0.5106\n","32   0.19  0.31  0.17    0.33  ...  0.000  1.000  0.000    0.0000\n","56   0.08  0.46  0.33    0.13  ...  0.000  0.741  0.259    0.4215\n","67   0.71  0.08  0.17    0.04  ...  0.371  0.225  0.404    0.0772\n","70   0.18   0.2  0.08    0.54  ...  0.287  0.463  0.250   -0.1027\n","77   0.28  0.17  0.16    0.38  ...  0.169  0.438  0.394    0.5574\n","84   0.13  0.26  0.24    0.36  ...  0.000  1.000  0.000    0.0000\n","86   0.08  0.74   0.1    0.08  ...  0.000  0.676  0.324    0.3400\n","104  0.23  0.33   0.2    0.23  ...  0.467  0.533  0.000   -0.6435\n","105  0.24  0.24  0.21    0.31  ...  0.000  0.581  0.419    0.5574\n","113  0.08  0.76  0.08    0.08  ...  0.342  0.158  0.500    0.4588\n","134  0.25   0.3  0.23    0.22  ...  0.145  0.598  0.256    0.3182\n","150  0.27  0.34  0.25    0.14  ...  0.000  1.000  0.000    0.0000\n","152  0.23  0.32  0.11    0.34  ...  0.000  1.000  0.000    0.0000\n","159  0.35  0.34  0.17    0.14  ...  0.000  0.674  0.326    0.4404\n","177  0.17  0.38  0.13    0.32  ...  0.298  0.702  0.000   -0.1779\n","184  0.07  0.81  0.05    0.06  ...  0.462  0.220  0.319   -0.3818\n","\n","[20 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":90}]},{"cell_type":"code","metadata":{"id":"Z9_eExiAk8m6","colab_type":"code","outputId":"ccd5f496-73d3-48f5-fe77-7dea4495b666","executionInfo":{"status":"ok","timestamp":1590729138057,"user_tz":-600,"elapsed":1723,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Heirarchal classification where I use NLTK to determine if a tweet is positive (joy) or not and then apply my model to classify\n","# the remaining negative tweets into fear, sadness and anger might work. Per below, NLTK can determine joyful tweets in the validation\n","# set with 72% accuracy. Unfortunately I don't have time to fully explore this idea.\n","\n","joy_labels = [1 if emotions[int(emotion_num)]=='joy' else 0 for emotion_num in y_val]\n","\n","nltk_preds = []\n","for tweet in tweets_val_normalised_shuffled:\n","  if sid.polarity_scores(tweet)['compound'] > 0:\n","    nltk_preds.append(1)\n","  else:\n","    nltk_preds.append(0)\n","\n","accuracy_score(nltk_preds, joy_labels)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7493150684931507"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"c1SYX24f3Zp8"},"source":["## Feature selection:"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"og5TLfhQ4ASm"},"source":["The models are unlikely to be overfitting due to too much flexibility as some of them are reasonably simple models and they have been fit with the conservative default settings (e.g. by default, the linear svc sets C=1 and logistic regression applies l2 regularisation).\n","\n","Below I try various feature selection methods to no avail."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"uvwslR3x8t3b"},"source":["*1. Select 1000 best features using chi-sq feature selection:*\n","\n","Result: training accuracy decreases but validation accuracy remains similar. KNN is much improved though."]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590732451200,"user_tz":-600,"elapsed":19234,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"lpBBvHw8625i","outputId":"b715db5c-83e1-4106-fa00-6c745e6a276c","colab":{"base_uri":"https://localhost:8080/","height":247}},"source":["# Source: https://towardsdatascience.com/multi-class-text-classification-with-scikit-learn-12f1e60e0a9f\n","\n","from sklearn.feature_selection import SelectKBest, chi2\n","\n","tfidf_train_2 = TfidfVectorizer(ngram_range=(1, 2))\n","X_train_2 = tfidf_train_2.fit_transform(tweets_train_normalised_shuffled)\n","X_val_2 = tfidf_train_2.transform(tweets_val_normalised_shuffled)\n","\n","chi2_selector = SelectKBest(chi2, k=1000)\n","X_train_2 = chi2_selector.fit_transform(X_train_2, y_train)\n","X_val_2 = chi2_selector.transform(X_val_2)\n","models = reset_models_to_original()\n","run_models(models, X_train_2, y_train, X_val_2, y_val)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"],"name":"stderr"},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Naive Bayes</th>\n","      <th>KNN</th>\n","      <th>Logistic Reg</th>\n","      <th>Softmax</th>\n","      <th>Linear SVM</th>\n","      <th>Non-Linear SVM</th>\n","      <th>Random Forest</th>\n","      <th>Grad. Boosting</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Training data</th>\n","      <td>0.7539</td>\n","      <td>0.8394</td>\n","      <td>0.8142</td>\n","      <td>0.8363</td>\n","      <td>0.9001</td>\n","      <td>0.8839</td>\n","      <td>0.9474</td>\n","      <td>0.8391</td>\n","    </tr>\n","    <tr>\n","      <th>Validation data</th>\n","      <td>0.4418</td>\n","      <td>0.4342</td>\n","      <td>0.4473</td>\n","      <td>0.4507</td>\n","      <td>0.4562</td>\n","      <td>0.4397</td>\n","      <td>0.4445</td>\n","      <td>0.4233</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Naive Bayes     KNN  ...  Random Forest  Grad. Boosting\n","Training data         0.7539  0.8394  ...         0.9474          0.8391\n","Validation data       0.4418  0.4342  ...         0.4445          0.4233\n","\n","[2 rows x 8 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"HinGm3Qi_D9T","colab_type":"code","outputId":"934fe054-7654-4600-d0ac-3c9a81fbf7a4","executionInfo":{"status":"error","timestamp":1590729181041,"user_tz":-600,"elapsed":1878,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":198}},"source":["# 57% on the public test set (worse than the initial linear SVM)\n","X = tfidf_train_2.fit_transform(tweets_normalised_shuffled)\n","X_test = tfidf_train_2.transform(tweets_test_normalised)\n","create_submission_file(models['Linear SVM'], X, y, X_test)"],"execution_count":0,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-5fb265270cde>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtfidf_train_2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtweets_normalised_shuffled\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtfidf_train_2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtweets_test_normalised\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mcreate_submission_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Linear SVM'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'create_submission_file' is not defined"]}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"J95bNSzx_dRd"},"source":["*2. Use a type of dimensionality reduction appropriate for a sparse matrix:*\n","\n","Result: this method is too slow to run other than on logistic regression and linear SVM. It allows the models to achieve the same validation error at ~10% lower training error. No improvement to validation error though."]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590729193280,"user_tz":-600,"elapsed":7910,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"S25V-xbu_dtU","outputId":"54c28558-c0ad-4800-bd2c-a8254399aac5","colab":{"base_uri":"https://localhost:8080/","height":111}},"source":["from sklearn.decomposition import TruncatedSVD\n","\n","tfidf_train_3 = TfidfVectorizer(ngram_range=(1, 1))\n","X_train_3 = tfidf_train_3.fit_transform(tweets_train_normalised_shuffled)\n","X_val_3 = tfidf_train_3.transform(tweets_val_normalised_shuffled)\n","\n","tsvd = TruncatedSVD(n_components=500)\n","X_train_3 = tsvd.fit_transform(X_train_3)\n","X_val_3 = tsvd.transform(X_val_3)\n","models = {\"Logistic Reg\" : LogisticRegression(multi_class='ovr', max_iter=500), \"Linear SVM\" : LinearSVC(C=0.1)}\n","run_models(models, X_train_3, y_train, X_val_3, y_val)"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Logistic Reg</th>\n","      <th>Linear SVM</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Training data</th>\n","      <td>0.7849</td>\n","      <td>0.7868</td>\n","    </tr>\n","    <tr>\n","      <th>Validation data</th>\n","      <td>0.4199</td>\n","      <td>0.4226</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                 Logistic Reg  Linear SVM\n","Training data          0.7849      0.7868\n","Validation data        0.4199      0.4226"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"9bzgQ4qHktmA","colab_type":"text"},"source":["*3. Use recursive feature elimination to fit the model with only the most important features from the logistic regression*\n","\n","Result: no significant difference to other methods"]},{"cell_type":"code","metadata":{"id":"FKczc-IbkuAW","colab_type":"code","outputId":"0f6e809a-e260-4723-b62a-c91d2e30edad","executionInfo":{"status":"ok","timestamp":1590729212989,"user_tz":-600,"elapsed":11830,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from sklearn.feature_selection import RFE\n","\n","rfe = RFE(estimator=models['Logistic Reg'], n_features_to_select=1000, step=100)\n","rfe.fit(X_train, y_train)\n","accuracy_score(y_val, rfe.predict(X_val))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.4232876712328767"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"l6M39mWGFbpm"},"source":["## Use grid-search to find a better model:"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"hmKajlwTO1Vx"},"source":["Finally, I try a grid search across multiple models:"]},{"cell_type":"code","metadata":{"id":"jVhjjdWhqBMB","colab_type":"code","outputId":"3ec94caf-a948-4e75-f044-b06336cd9783","executionInfo":{"status":"ok","timestamp":1590713391424,"user_tz":-600,"elapsed":1928,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/"}},"source":["# linear SVM - already done this\n","grid_search.best_estimator_.fit(tweets_train_normalised_shuffled, y_train)\n","y_pred = grid_search.best_estimator_.predict(tweets_val_normalised_shuffled)\n","accuracy_score(y_val, y_pred)\n","print(\"LINEAR SVM:\")\n","print(\"Best model based on CV scores:\", grid_search.best_params_)\n","print(\"Validation Accuracy:\", accuracy_score(y_val, y_pred), \"\\n\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["LINEAR SVM:\n","Best model based on CV scores: {'lr__C': 1, 'tfidf__max_features': 7000, 'tfidf__ngram_range': (1, 1)}\n","Validation Accuracy: 0.4541095890410959 \n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"status":"ok","timestamp":1590723605716,"user_tz":-600,"elapsed":2693918,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"id":"boiYZ20fO62s","outputId":"851d4504-cbe0-4199-bdca-baea7faaea0c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# # linear SVM (from earlier))\n","# grid_search.best_estimator_.fit(tweets_train_normalised_shuffled, y_train)\n","# y_pred = grid_search.best_estimator_.predict(tweets_val_normalised_shuffled)\n","# accuracy_score(y_val, y_pred)\n","# print(\"LINEAR SVM:\")\n","# print(\"Best model based on CV scores:\", grid_search.best_params_)\n","# print(\"Validation Accuracy:\", accuracy_score(y_val, y_pred), \"\\n\")\n","\n","# logistic regression\n","pipeline = Pipeline([('tfidf', TfidfVectorizer()), ('lr', LogisticRegression(max_iter=500))])\n","grid = [{'tfidf__ngram_range':[(1,1), (1,2)], 'tfidf__max_features':[500, 1000, 3500, 7000], 'lr__C':[0.1, 1, 10]}]\n","grid_search = GridSearchCV(pipeline, grid, cv=6, scoring='accuracy')\n","grid_search.fit(tweets_normalised_shuffled, y)\n","grid_search.best_estimator_.fit(tweets_train_normalised_shuffled, y_train)\n","y_val_pred = grid_search.best_estimator_.predict(tweets_val_normalised_shuffled)\n","print(\"LOGISTIC REGRESSION:\")\n","print(\"Best model based on CV scores:\", grid_search.best_params_)\n","print(\"Validation Accuracy:\", accuracy_score(y_val, y_val_pred), \"\\n\")\n","\n","# random forest\n","pipeline = Pipeline([('tfidf', TfidfVectorizer()), ('rf', RandomForestClassifier())])\n","grid = [{'tfidf__ngram_range':[(1,1), (1,2)], 'tfidf__max_features':[500, 1000, 3500, 7000],\n","         'rf__max_depth':[10, 25, 50, None], 'rf__n_estimators':[10, 100, 500], 'rf__max_samples':[0.1, 0.5, 1]}]\n","grid_search = GridSearchCV(pipeline, grid, cv=6, scoring='accuracy')\n","grid_search.fit(tweets_normalised_shuffled, y)\n","grid_search.best_estimator_.fit(tweets_train_normalised_shuffled, y_train)\n","y_val_pred = grid_search.best_estimator_.predict(tweets_val_normalised_shuffled)\n","print(\"RANDOM FOREST:\")\n","print(\"Best model based on CV scores:\", grid_search.best_params_)\n","print(\"Validation Accuracy:\", accuracy_score(y_val, y_val_pred), \"\\n\")\n","\n","# non-linear SVM\n","pipeline = Pipeline([('tfidf', TfidfVectorizer()), ('svc', SVC())])\n","grid = [{'tfidf__ngram_range':[(1,1), (1,2)], 'tfidf__max_features':[500, 1000, 3500, 7000], 'svc__C':[0.1, 1, 10]}]\n","grid_search = GridSearchCV(pipeline, grid, cv=6, scoring='accuracy')\n","grid_search.fit(tweets_normalised_shuffled, y)\n","grid_search.best_estimator_.fit(tweets_train_normalised_shuffled, y_train)\n","y_val_pred = grid_search.best_estimator_.predict(tweets_val_normalised_shuffled)\n","print(\"NON-LINEAR SVM:\")\n","print(\"Best model based on CV scores:\", grid_search.best_params_)\n","print(\"Validation Accuracy:\", accuracy_score(y_val, y_val_pred), \"\\n\")"],"execution_count":0,"outputs":[{"output_type":"stream","text":["LOGISTIC REGRESSION:\n","Best model based on CV scores: {'lr__C': 1, 'tfidf__max_features': 7000, 'tfidf__ngram_range': (1, 1)}\n","Validation Accuracy: 0.4541095890410959 \n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:523: UserWarning: Some inputs do not have OOB scores. This probably means too few trees were used to compute any reliable oob estimates.\n","  warn(\"Some inputs do not have OOB scores. \"\n","/usr/local/lib/python3.6/dist-packages/sklearn/ensemble/_forest.py:528: RuntimeWarning: invalid value encountered in true_divide\n","  predictions[k].sum(axis=1)[:, np.newaxis])\n"],"name":"stderr"},{"output_type":"stream","text":["RANDOM FOREST:\n","Best model based on CV scores: {'rf__max_depth': None, 'rf__max_samples': 0.5, 'rf__n_estimators': 500, 'rf__oob_score': False, 'tfidf__max_features': 7000, 'tfidf__ngram_range': (1, 1)}\n","Validation Accuracy: 0.4541095890410959 \n","\n","NON-LINEAR SVM:\n","Best model based on CV scores: {'svc__C': 10, 'tfidf__max_features': 7000, 'tfidf__ngram_range': (1, 1)}\n","Validation Accuracy: 0.4541095890410959 \n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"V07pwr1ISw8S","colab_type":"text"},"source":["## Conclusion for conventional machine learning:"]},{"cell_type":"markdown","metadata":{"id":"vvYzG22WPQny","colab_type":"text"},"source":["The poor performance is not due to the algorithms/models as they easily overfit the training data and I have explored multiple configurations for multiple models. The issue is the data:\n","\n","- Data mismatch: my first grid search with 6 folds (the 6th fold being the validation data) showed that the validation data could be from a different distribution than the training data as the accuracy on the validation fold was much lower than folds 1-5.\n","\n","- Noisy data: various feature extraction methods made no difference so I think ~45% on the validation set and ~60% on the public test set is the best I can do without further pre-processing. My error analysis confirms the noisyness (e.g. for tweets that have multiple emotion words like 'anger' and 'happy' in the same tweet, something needs to be done as the classifier is going to be confused). Some pre-processed tweets have no emotion words in them at all so may also confuse the classifier. Other possible issues: more than 2 letters repeated (e.g. haaaappppyyy instead of happy), general mispelling and slang. I've done some research on this and also tried a few things not shown but nothing helped. Unsure how to proceed."]},{"cell_type":"markdown","metadata":{"id":"cfIDRdNEw-BR","colab_type":"text"},"source":["# Train deep learning models:"]},{"cell_type":"code","metadata":{"id":"zP_EIVQ9-NaA","colab_type":"code","colab":{}},"source":["# function to plot results for different deep learning models\n","\n","def plot_model_results(history, epochs=100, x_step=5):  \n","  train_accuracy = history.history['accuracy']\n","  acc_for_max = train_accuracy\n","\n","  if 'val_accuracy' in history.history.keys():\n","    val_accuracy = history.history['val_accuracy']\n","    plt.plot(np.arange(1, epochs+1), val_accuracy, label='Val acc');\n","    acc_for_max = val_accuracy\n","\n","  plt.plot(np.arange(1, epochs+1), train_accuracy, label='Training acc');\n","  plt.xlabel('Epoch'); plt.ylabel('Accuracy');\n","  plt.ylim(0, 1.0);\n","  plt.xticks(np.arange(1, epochs+1, x_step)); plt.yticks(np.arange(0, 1.05, 0.05));\n","  plt.grid();\n","  plt.legend();\n","  max_acc, max_acc_epoch = np.round(np.max(acc_for_max), 4), np.argmax(acc_for_max)+1\n","  plt.vlines(x=max_acc_epoch, ymin=0, ymax=1, color='gray', label='Max val acc');\n","  plt.hlines(y=max_acc, xmin=0, xmax=epochs+1, color='gray', label=None);\n","  plt.annotate(max_acc, (max_acc_epoch, max_acc), textcoords=\"offset points\", xytext=(0,0), ha='center')\n","\n","  print('Max accuracy', max_acc, 'at epoch', max_acc_epoch, \"\\n\")"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"aEhilNhUIimt","colab_type":"code","outputId":"57eb6ead-b355-440b-ea09-7b3f2207ab75","executionInfo":{"status":"ok","timestamp":1590729224653,"user_tz":-600,"elapsed":4021,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import tensorflow as tf\n","from tensorflow import keras\n","from keras.models import Sequential, Model\n","from keras.layers import InputLayer, Dense, Dropout, Flatten, Activation, Embedding, GlobalAveragePooling1D, Conv1D, GlobalMaxPooling1D\n","from keras.layers import BatchNormalization, Concatenate, Input, MaxPool1D\n","from keras.callbacks import EarlyStopping, ModelCheckpoint\n","from keras.preprocessing.text import Tokenizer\n","from keras.preprocessing.sequence import pad_sequences\n","from functools import partial"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"r2T8_HaVxCZb","colab_type":"text"},"source":["### Build a simple dense network as a baseline to compare against:"]},{"cell_type":"code","metadata":{"id":"jF0pgb5px3V4","colab_type":"code","colab":{}},"source":["# will re-use this variable in multiple models\n","DenseLayer = partial(Dense, activation='relu', kernel_initializer='he_normal')\n","\n","def new_dense_model():\n","  neurons_per_layer = 2500\n","\n","  model_dense = Sequential([\n","      InputLayer(input_shape=(1000,)),\n","      Dropout(0.2),\n","      DenseLayer(neurons_per_layer),\n","      Dropout(0.2),\n","      DenseLayer(neurons_per_layer),\n","      Dropout(0.2),\n","      DenseLayer(neurons_per_layer),\n","      Dropout(0.2),\n","      Dense(4, activation='softmax', kernel_initializer='glorot_uniform')\n","  ])   \n","  return model_dense"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gsmoQf-YQ4Q4","colab_type":"code","outputId":"a1c3a70a-e3e8-4f44-ffc2-4aa9d3cc6197","executionInfo":{"status":"ok","timestamp":1590729361369,"user_tz":-600,"elapsed":1737,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":425}},"source":["model_dense_train = new_dense_model()\n","model_dense_train.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"sequential_3\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","dropout_9 (Dropout)          (None, 1000)              0         \n","_________________________________________________________________\n","dense_9 (Dense)              (None, 2500)              2502500   \n","_________________________________________________________________\n","dropout_10 (Dropout)         (None, 2500)              0         \n","_________________________________________________________________\n","dense_10 (Dense)             (None, 2500)              6252500   \n","_________________________________________________________________\n","dropout_11 (Dropout)         (None, 2500)              0         \n","_________________________________________________________________\n","dense_11 (Dense)             (None, 2500)              6252500   \n","_________________________________________________________________\n","dropout_12 (Dropout)         (None, 2500)              0         \n","_________________________________________________________________\n","dense_12 (Dense)             (None, 4)                 10004     \n","=================================================================\n","Total params: 15,017,504\n","Trainable params: 15,017,504\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"qzLgnWe-oejj","colab_type":"text"},"source":["Max validation accuracy of 45.41% is similar to the conventional models. Max accuracy is reached at epoch 40 but is essentially reached at epoch 21 when training accuracy is only 70%. Anything after this I consider overfitting."]},{"cell_type":"code","metadata":{"id":"pZOxCiyFx33L","colab_type":"code","outputId":"c7af0bfb-694a-4a8f-8336-c52a88307d8a","executionInfo":{"status":"ok","timestamp":1590729403782,"user_tz":-600,"elapsed":41338,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["model_dense_train.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])\n","history = model_dense_train.fit(X_train_2, y_train, epochs=100, validation_data=(X_val_2, y_val), verbose=False, \n","                                callbacks=[EarlyStopping(patience=10, restore_best_weights=True)])\n","plot_model_results(history, epochs=len(history.history['accuracy']))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Max accuracy 0.4329 at epoch 22 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Ctubu4KGVrfB","colab_type":"code","colab":{}},"source":["# # X_val_special = tfidf_all.transform(val_set[:, 0])\n","\n","# # compare SVM and dl on the special validation data\n","# pred_dl_val = np.argmax(model_dense_train.predict(X_val), axis=1)\n","\n","# models['Linear SVM'].fit(X_train, y_train)\n","# pred_conv_val = models['Linear SVM'].predict(X_val)\n","\n","# print(\"VAL SET\")\n","# print(\"SVM acc:\", accuracy_score(y_val, pred_conv_val))\n","# print(\"DL acc:\", accuracy_score(y_val.astype(np.int64), pred_dl_val))\n","# print(\"SVM vs. DL:\", accuracy_score(pred_dl_val, pred_conv_val.astype(np.int64)))\n","# print(\"\\n\")\n","\n","# # dl on the validation data\n","# from sklearn.metrics import confusion_matrix\n","\n","# cmtrx = confusion_matrix(y_val.astype(np.int64), pred_dl_val)\n","# cmtrx = cmtrx / cmtrx.sum(axis=1, keepdims=True)\n","# print(\"DL Val\")\n","# print(np.round(cmtrx, 2))\n","# print(\"\\n\")\n","\n","# # SVM on the validation data\n","# cmtrx = confusion_matrix(y_val, pred_conv_val)\n","# cmtrx = cmtrx / cmtrx.sum(axis=1, keepdims=True)\n","# print(\"SVM Val\")\n","# print(np.round(cmtrx, 2))\n","# print(\"\\n\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t4BSQD0rqxCw","colab_type":"text"},"source":["Kaggle scores the above model at 59% on the public test set (below the 60.5% achieved with the linear svm):"]},{"cell_type":"code","metadata":{"id":"UCb8zrDi35XH","colab_type":"code","outputId":"df058ba9-b6cd-4153-f74b-f844a990da84","executionInfo":{"status":"ok","timestamp":1590545009936,"user_tz":-600,"elapsed":143054,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["# need to create a new model to fit to X as the previous model is already fit to X_train\n","model_dense_all = new_dense_model()\n","model_dense_all.compile(loss='sparse_categorical_crossentropy', optimizer='sgd', metrics=['accuracy'])\n","history = model_dense_all.fit(X, y, epochs=100, verbose=False,\n","                              callbacks=[EarlyStopping(patience=10, restore_best_weights=True, monitor='loss')])\n","plot_model_results(history, epochs=len(history.history['accuracy']))\n","y_pred = np.argmax(model_dense_all.predict(X_test), axis=1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Max accuracy 0.855 at epoch 95 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"y_jR2yK3RZ2f","colab_type":"code","colab":{}},"source":["y_test_predict_np = np.c_[np.array(range(1, 4065)).astype(int), y_pred]\n","y_test_predict = pd.DataFrame(y_test_predict_np, columns=[\"ID\", \"Prediction\"])\n","y_test_predict.to_csv(join(dataset_directory, \"42592380-conv.csv\"), index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Tm0bozC4LW_1","colab_type":"code","colab":{}},"source":["# X_val_special = tfidf_all.transform(val_set[:, 0])\n","\n","# # compare SVM and dl on the special validation data\n","# pred_dl_val = np.argmax(model_dense_all.predict(X_val_special), axis=1)\n","\n","# models['Linear SVM'].fit(X, y)\n","# pred_conv_val = models['Linear SVM'].predict(X_val_special)\n","\n","# print(\"VAL SET\")\n","# print(\"SVM acc:\", accuracy_score(y_val, pred_conv_val))\n","# print(\"DL acc:\", accuracy_score(y_val.astype(np.int64), pred_dl_val))\n","# print(\"SVM vs. DL:\", accuracy_score(pred_dl_val, pred_conv_val.astype(np.int64)))\n","# print(\"\\n\")\n","\n","# # dl on the validation data\n","# from sklearn.metrics import confusion_matrix\n","\n","# cmtrx = confusion_matrix(y_val.astype(np.int64), pred_dl_val)\n","# cmtrx = cmtrx / cmtrx.sum(axis=1, keepdims=True)\n","# print(\"DL Val\")\n","# print(np.round(cmtrx, 2))\n","# print(\"\\n\")\n","\n","# # SVM on the validation data\n","# cmtrx = confusion_matrix(y_val, pred_conv_val)\n","# cmtrx = cmtrx / cmtrx.sum(axis=1, keepdims=True)\n","# print(\"SVM Val\")\n","# print(np.round(cmtrx, 2))\n","# print(\"\\n\")\n","\n","# # compare models on the test data\n","# print(\"TEST SET\")\n","# models['Linear SVM'].fit(X, y)\n","# pred_conv = models['Linear SVM'].predict(X_test)\n","# print(\"SVM vs. DL\", accuracy_score(y_pred, pred_conv.astype(np.int64)))\n","# print(y_pred[0:10])\n","# print(pred_conv[0:10].astype(np.int64))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ld1J8rxsGa59","colab_type":"text"},"source":["### Using an embedding layer instead of BoW:"]},{"cell_type":"code","metadata":{"id":"eEAdHrfXCx3W","colab_type":"code","outputId":"b9766010-0c5c-424b-b94a-d286ce26f981","executionInfo":{"status":"ok","timestamp":1590566055558,"user_tz":-600,"elapsed":1396,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":493}},"source":["model_embed = Sequential([\n","    Embedding(len(vocabulary), 25, mask_zero=True, input_length=52),\n","    GlobalAveragePooling1D(),\n","    Dropout(0.2),\n","\n","    DenseLayer(25),\n","    Dropout(0.2),\n","\n","    DenseLayer(25),\n","    Dropout(0.2),\n","    \n","    DenseLayer(25),\n","    Dropout(0.2),\n","\n","    Dense(4, activation='softmax')\n","])\n","\n","model_embed.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_10 (Embedding)     (None, 52, 25)            349450    \n","_________________________________________________________________\n","global_average_pooling1d_2 ( (None, 25)                0         \n","_________________________________________________________________\n","dropout_16 (Dropout)         (None, 25)                0         \n","_________________________________________________________________\n","dense_20 (Dense)             (None, 25)                650       \n","_________________________________________________________________\n","dropout_17 (Dropout)         (None, 25)                0         \n","_________________________________________________________________\n","dense_21 (Dense)             (None, 25)                650       \n","_________________________________________________________________\n","dropout_18 (Dropout)         (None, 25)                0         \n","_________________________________________________________________\n","dense_22 (Dense)             (None, 25)                650       \n","_________________________________________________________________\n","dropout_19 (Dropout)         (None, 25)                0         \n","_________________________________________________________________\n","dense_23 (Dense)             (None, 4)                 104       \n","=================================================================\n","Total params: 351,504\n","Trainable params: 351,504\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gWgC5sSAD5ax","colab_type":"code","outputId":"3acd3984-b928-422b-dbe4-e8fcb9b70e31","executionInfo":{"status":"ok","timestamp":1590566074886,"user_tz":-600,"elapsed":17427,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":371}},"source":["# note, the non pre-processed tweets are being used here\n","model_embed.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","history = model_embed.fit(tweets_train, labels_train, epochs=100, validation_data=(tweets_val, labels_val), verbose=False,\n","                          callbacks=[EarlyStopping(patience=10, restore_best_weights=True)])\n","plot_model_results(history, epochs=len(history.history['accuracy']))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/indexed_slices.py:434: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"Converting sparse IndexedSlices to a dense Tensor of unknown shape. \"\n"],"name":"stderr"},{"output_type":"stream","text":["Max accuracy 0.4253 at epoch 8 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"nXeXPsnNIFhB","colab_type":"text"},"source":["### Use pre-trained embeddings:"]},{"cell_type":"code","metadata":{"id":"H3Mn_yRUIHPw","colab_type":"code","colab":{}},"source":["import tensorflow_hub as hub\n","embedding = \"https://tfhub.dev/google/tf2-preview/nnlm-en-dim128/1\"\n","hub_layer = hub.KerasLayer(embedding, input_shape=[], dtype=tf.string, trainable=True)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"8zyZr_7lPhQh","colab_type":"code","outputId":"7bb12ff2-bf45-4799-8990-e6b84f6b541f","executionInfo":{"status":"ok","timestamp":1590724574932,"user_tz":-600,"elapsed":2157,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":391}},"source":["def new_pretrained_model():\n","  model_pretrain = keras.Sequential([\n","      hub_layer,\n","      # tf.keras.layers.GlobalAveragePooling1D(),\n","      keras.layers.Dropout(0.2),\n","      keras.layers.Dense(128, activation='relu', kernel_initializer='he_normal'),\n","      keras.layers.Dropout(0.2),\n","      keras.layers.Dense(128, activation='relu', kernel_initializer='he_normal'),\n","      keras.layers.Dropout(0.2),\n","      keras.layers.Dense(4, activation='softmax')\n","  ])\n","  return model_pretrain\n","\n","model_pretrain = new_pretrained_model()\n","model_pretrain.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","keras_layer (KerasLayer)     (None, 128)               124642688 \n","_________________________________________________________________\n","dropout (Dropout)            (None, 128)               0         \n","_________________________________________________________________\n","dense (Dense)                (None, 128)               16512     \n","_________________________________________________________________\n","dropout_1 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 128)               16512     \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 4)                 516       \n","=================================================================\n","Total params: 124,676,228\n","Trainable params: 124,676,228\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z-2FiNLPIqXJ","colab_type":"code","colab":{}},"source":["# convert the tweets to string format WITHOUT pre-processing. hub_layer requires this input format.\n","\n","def tweets_to_strings(tweets):\n","  tweetstrings = []\n","  for tweet in tweets:\n","    tweet_string = \"\"\n","    for vocab_idx in tweet:\n","      word = emoji.demojize(idx_to_word[vocab_idx])\n","      if word == '<END>': break\n","      if word not in ['<START>', '<NULL>', '<user>']:\n","        for subword in word_tokenize(word): # word_tokenize splits off the hashtags\n","          tweet_string = tweet_string + subword + \" \"\n","  \n","    tweetstrings.append(tweet_string)\n","\n","  return tweetstrings\n","\n","tweetstrings_train, tweetstrings_val = tf.constant(tweets_to_strings(tweets_train)), tf.constant(tweets_to_strings(tweets_val))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"esT96zaPPnbD","colab_type":"code","outputId":"06d76568-a7a6-4586-ae6b-beef818169cc","executionInfo":{"status":"ok","timestamp":1590565705958,"user_tz":-600,"elapsed":275941,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":317}},"source":["model_pretrain.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","history = model_pretrain.fit(tweetstrings_train, labels_train, epochs=100, validation_data=(tweetstrings_val, labels_val), verbose=False,\n","                             callbacks=[tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)])\n","plot_model_results(history, epochs=len(history.history['accuracy']))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Max accuracy 0.4493 at epoch 6 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"Iuh6N4cz66eE","colab_type":"code","colab":{}},"source":["# now train the model using the tweets in string format WITH pre-processing:\n","tweetstrings_train, tweetstrings_val, tweetstrings_test = tf.constant(tweets_train_normalised_shuffled), tf.constant(tweets_val_normalised_shuffled), tf.constant(tweets_test_normalised)\n","\n","model_pretrain = new_pretrained_model() # need a new model to reset weights\n","model_pretrain.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","history = model_pretrain.fit(tweetstrings_train, y_train, epochs=100, validation_data=(tweetstrings_val, y_val), verbose=False,\n","                             callbacks=[tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True)])\n","plot_model_results(history, epochs=len(history.history['accuracy']))"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"f_bhYv92Gg7G","colab_type":"text"},"source":["### Use a CNN:"]},{"cell_type":"code","metadata":{"id":"hkAbyXnfF9jl","colab_type":"code","outputId":"a0d97dcb-2221-412d-8916-99e7ed6ca231","executionInfo":{"status":"ok","timestamp":1590725538641,"user_tz":-600,"elapsed":1689,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":629}},"source":["model_cnn = Sequential([\n","    Embedding(len(vocabulary), 25, input_length=52),\n","    # GlobalAveragePooling1D(),\n","    Dropout(0.3),\n","\n","    Conv1D(25, 2, padding='valid', activation='relu', strides=1),\n","    MaxPool1D(),\n","    Conv1D(25, 2, padding='valid', activation='relu', strides=1),\n","    MaxPool1D(),\n","\n","    Flatten(),\n","\n","    DenseLayer(100),\n","    Dropout(0.3),\n","    DenseLayer(100),\n","    Dropout(0.3),\n","    DenseLayer(100),\n","    Dropout(0.3),\n","    Dense(4, activation=\"softmax\"),\n","])\n","\n","model_cnn.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 52, 25)            349450    \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 52, 25)            0         \n","_________________________________________________________________\n","conv1d_4 (Conv1D)            (None, 51, 25)            1275      \n","_________________________________________________________________\n","max_pooling1d_5 (MaxPooling1 (None, 25, 25)            0         \n","_________________________________________________________________\n","conv1d_5 (Conv1D)            (None, 24, 25)            1275      \n","_________________________________________________________________\n","max_pooling1d_6 (MaxPooling1 (None, 12, 25)            0         \n","_________________________________________________________________\n","flatten_2 (Flatten)          (None, 300)               0         \n","_________________________________________________________________\n","dense_1 (Dense)              (None, 100)               30100     \n","_________________________________________________________________\n","dropout_3 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","dropout_4 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 100)               10100     \n","_________________________________________________________________\n","dropout_5 (Dropout)          (None, 100)               0         \n","_________________________________________________________________\n","dense_4 (Dense)              (None, 4)                 404       \n","=================================================================\n","Total params: 402,704\n","Trainable params: 402,704\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"O6_CK0n7T0c0","colab_type":"code","outputId":"5da80e99-a927-4f70-ac70-f64625ad7265","executionInfo":{"status":"ok","timestamp":1590725628078,"user_tz":-600,"elapsed":28393,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":371}},"source":["# note, the non pre-processed tweets are being used here\n","model_cnn.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","history = model_cnn.fit(tweets_train, labels_train, epochs=100, validation_data=(tweets_val, labels_val), verbose=False,\n","                        callbacks=[EarlyStopping(patience=20, restore_best_weights=True)])\n","plot_model_results(history, epochs=len(history.history['accuracy']))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/indexed_slices.py:434: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"Converting sparse IndexedSlices to a dense Tensor of unknown shape. \"\n"],"name":"stderr"},{"output_type":"stream","text":["Max accuracy 0.4315 at epoch 22 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"zJMaJg3LEGxu","colab_type":"text"},"source":["### Use a multi-channel CNN:"]},{"cell_type":"markdown","metadata":{"id":"IAu_7-joFMBy","colab_type":"text"},"source":["- Architecture from http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/\n","\n","- Used https://machinelearningmastery.com/develop-n-gram-multichannel-convolutional-neural-network-sentiment-analysis/ to help a little with this code as couldn't figure out input layer myself"]},{"cell_type":"code","metadata":{"id":"2wAalAJn4-EG","colab_type":"code","outputId":"188c8bb1-447c-411c-bc0c-749857407a4f","executionInfo":{"status":"ok","timestamp":1590729494444,"user_tz":-600,"elapsed":1110,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# The tweets were originally provided in tokenized format but I pre-processed them into strings. Below I re-tokenize them\n","# these pre-processed tweets. Using pre-processed and non pre-processed tweets didn't make much difference in the prior models though.\n","\n","all_tweets = list(tweets_normalised_shuffled) + tweets_test_normalised\n","\n","tokenizer = Tokenizer()\n","tweets_normalised_tokenized = tokenizer.fit_on_texts(tweets_normalised_shuffled)\n","encoded = tokenizer.texts_to_sequences(all_tweets)\n","padded = pad_sequences(encoded, maxlen=52, padding='post')\n","vocab_size = len(tokenizer.word_index) + 1\n","\n","tweets_train_retokenized, tweets_val_retokenized, tweets_test_retokenized = padded[:7098], padded[7098:8558], padded[8558:]\n","\n","tweets_train_retokenized.shape, tweets_val_retokenized.shape, tweets_test_retokenized.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((7098, 52), (1460, 52), (4064, 52))"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"id":"z5svl-Svmbxm","colab_type":"code","outputId":"b34ba758-27c1-409e-df20-297127aaf725","executionInfo":{"status":"ok","timestamp":1590729499158,"user_tz":-600,"elapsed":1695,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":561}},"source":["input_ = Input(shape=(52,))\n","embedding = Embedding(vocab_size, 20)(input_)\n","conv1 = Conv1D(50, 1, padding='valid', activation='relu', strides=1)(embedding)\n","pool1 = GlobalMaxPooling1D()(conv1)\n","\n","conv2 = Conv1D(50, 2, padding='valid', activation='relu', strides=1)(embedding)\n","pool2 = GlobalMaxPooling1D()(conv2)\n","\n","conv3 = Conv1D(50, 3, padding='valid', activation='relu', strides=1)(embedding)\n","pool3 = GlobalMaxPooling1D()(conv3)\n","\n","concat = Concatenate()([pool1, pool2, pool3])\n","dense = Dense(3, activation=\"relu\", kernel_initializer='he_normal')(concat)\n","output = Dense(4, activation=\"softmax\")(dense)\n","\n","model_cnn_ns = Model(inputs=[input_], outputs=[output])\n","\n","model_cnn_ns.summary()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Model: \"model_1\"\n","__________________________________________________________________________________________________\n","Layer (type)                    Output Shape         Param #     Connected to                     \n","==================================================================================================\n","input_4 (InputLayer)            (None, 52)           0                                            \n","__________________________________________________________________________________________________\n","embedding_1 (Embedding)         (None, 52, 20)       146940      input_4[0][0]                    \n","__________________________________________________________________________________________________\n","conv1d_1 (Conv1D)               (None, 52, 50)       1050        embedding_1[0][0]                \n","__________________________________________________________________________________________________\n","conv1d_2 (Conv1D)               (None, 51, 50)       2050        embedding_1[0][0]                \n","__________________________________________________________________________________________________\n","conv1d_3 (Conv1D)               (None, 50, 50)       3050        embedding_1[0][0]                \n","__________________________________________________________________________________________________\n","global_max_pooling1d_1 (GlobalM (None, 50)           0           conv1d_1[0][0]                   \n","__________________________________________________________________________________________________\n","global_max_pooling1d_2 (GlobalM (None, 50)           0           conv1d_2[0][0]                   \n","__________________________________________________________________________________________________\n","global_max_pooling1d_3 (GlobalM (None, 50)           0           conv1d_3[0][0]                   \n","__________________________________________________________________________________________________\n","concatenate_1 (Concatenate)     (None, 150)          0           global_max_pooling1d_1[0][0]     \n","                                                                 global_max_pooling1d_2[0][0]     \n","                                                                 global_max_pooling1d_3[0][0]     \n","__________________________________________________________________________________________________\n","dense_13 (Dense)                (None, 3)            453         concatenate_1[0][0]              \n","__________________________________________________________________________________________________\n","dense_14 (Dense)                (None, 4)            16          dense_13[0][0]                   \n","==================================================================================================\n","Total params: 153,559\n","Trainable params: 153,559\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1DDXB9IaxmjV","colab_type":"code","outputId":"2efa04f5-67ce-4831-b99c-9ee06e05391a","executionInfo":{"status":"ok","timestamp":1590729519279,"user_tz":-600,"elapsed":16696,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"}},"colab":{"base_uri":"https://localhost:8080/","height":371}},"source":["model_cnn_ns.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","history = model_cnn_ns.fit(tweets_train_retokenized, y_train, epochs=100, validation_data=(tweets_val_retokenized, y_val), verbose=False,\n","                           callbacks=[EarlyStopping(patience=10, restore_best_weights=True)])\n","plot_model_results(history, epochs=len(history.history['accuracy']))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/indexed_slices.py:434: UserWarning: Converting sparse IndexedSlices to a dense Tensor of unknown shape. This may consume a large amount of memory.\n","  \"Converting sparse IndexedSlices to a dense Tensor of unknown shape. \"\n"],"name":"stderr"},{"output_type":"stream","text":["Max accuracy 0.4233 at epoch 5 \n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"wTt0zfluTjRm","colab_type":"code","colab":{}},"source":["y_pred = np.argmax(model_cnn_ns.predict(tweets_test_retokenized), axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"o-1AZ0WJTkTk","colab_type":"code","colab":{}},"source":["y_test_predict_np = np.c_[np.array(range(1, 4065)).astype(int), y_pred]\n","y_test_predict = pd.DataFrame(y_test_predict_np, columns=[\"ID\", \"Prediction\"])\n","y_test_predict.to_csv(join(dataset_directory, \"42592380-conv.csv\"), index=False)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"7TqksvsoTRz8"},"source":["# More data:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"sKdxR8SwTTfg","colab":{}},"source":["# SOURCE: https://tlkh.github.io/text-emotion-classification/\n","\n","# tweets_train_new_df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/tweet-emotion-detection/language_dataset/training_new.csv\")\n","# tweets_train_new = tweets_train_new_df['content']\n","# y_new = tweets_train_new_df['Emotion']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"nI31nokVYzRr","colab":{}},"source":["# def normalise_tweets_2(tweets, labels):\n","#   lemmatizer = WordNetLemmatizer()\n","#   stop_punct = stopwords.words('english') + list(string.punctuation)\n","  \n","#   normalised_tweets = []\n","#   new_labels = []\n","\n","#   index = 0\n","#   for tweet in tweets:\n","#     tweet_words = []\n","#     tweet = tweet.lower()\n","#     for word in word_tokenize(tweet):\n","#       if word not in ['<START>', '<END>', '<NULL>', '<user>'] and word in emotion_words:\n","#         tweet_words += word_tokenize(emoji.demojize(word))\n","\n","#     normalised_tweet = \"\"\n","#     for word, tag in pos_tag(tweet_words):\n","#       if word not in stop_punct and not word.isdigit():\n","#         if tag.startswith('NN'):\n","#             pos = 'n'\n","#         elif tag.startswith('VB'):\n","#             pos = 'v'\n","#         else:\n","#             pos = 'a'\n","#         normalised_tweet = normalised_tweet + lemmatizer.lemmatize(word, pos) + ' '\n","    \n","#     if len(normalised_tweet) > 0:\n","#       normalised_tweets.append(normalised_tweet)\n","#       new_labels.append(labels[index])\n","    \n","#     index += 1\n","#   return normalised_tweets, new_labels"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"9Z99KSauZWaH","colab":{}},"source":["# tweets_train_new_normalised, y_train_new = normalise_tweets_2(tweets_train_new, y_new)\n","# tweets_train_new_normalised"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"S7zWwzbrgHbf","colab":{}},"source":["# tweets_train_all = tweets_train_normalised + tweets_train_new_normalised\n","# y_train_all = np.array(list(y_train) + list(y_train_new))\n","\n","# len(tweets_train_new), len(y_new), len(tweets_train_new_normalised),len(y_train_new)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","executionInfo":{"elapsed":2338,"status":"ok","timestamp":1587434220930,"user":{"displayName":"Alex Smith","photoUrl":"","userId":"01713317199988736550"},"user_tz":-600},"id":"puWt8raUZvcr","outputId":"3c12b91d-c215-4fd0-b119-259429da003a","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# # print(tweets_train_new[15])\n","# # word_tokenize(tweets_train_new[15])\n","# # normalise_tweets_2([tweets_train_new[15]])\n","\n","# tfidf_vect_2 = TfidfVectorizer(ngram_range=(1,2), stop_words='english')\n","\n","# #len(tweets_train_new_normalised[:21000]), len(tweets_train_new_normalised[21000:])\n","\n","# tfidf_vect_2.fit(tweets_train_new_normalised[:21000])\n","# X_train_new = tfidf_vect_2.transform(tweets_train_new_normalised[:21000])\n","# X_val_new = tfidf_vect_2.transform(tweets_train_new_normalised[21000:])\n","# y_train_new = y_new[:21000]\n","# y_val_new = y_new[21000:]\n","\n","# # X = tfidf_vect_2.fit_transform(tweets_normalised)\n","# # y = np.concatenate([y_train, y_val])\n","\n","# X_train_new.shape, y_train_new.shape, X_val_new.shape, y_val_new.shape#, X.shape, y.shape"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((21000, 128696), (21000,), (5643, 128696), (5643,))"]},"metadata":{"tags":[]},"execution_count":123}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Z7akNksSdHau","colab":{}},"source":["# tweets_train_all = tweets_train_normalised + tweets_train_new_normalised\n","# y_train_new = np.array(list(y_train) + list(tweets_train_new_df['Emotion']))\n","\n","# tfidf_vect_new = TfidfVectorizer(ngram_range=(1,2), stop_words='english')\n","# tfidf_vect_new.fit(tweets_train_all)\n","# X_train_new = tfidf_vect_new.transform(tweets_train_all)\n","# X_val_new = tfidf_vect_new.transform(tweets_val_normalised)\n","\n","# X_train_new.shape, y_train_new.shape, X_val_new.shape, y_val.shape"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"O4PMJNXpS7LC"},"source":["# Other:"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"O-ERcS1eI9Pz"},"source":["Heirarchal classification:"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"qAlq1AFaI9ld","colab":{}},"source":["y_train_sentiment = []\n","for emotion_num in y_train:\n","  if emotion_num == '2':\n","    y_train_sentiment.append(1)\n","  else:\n","    y_train_sentiment.append(0)\n","y_train_sentiment = np.array(y_train_sentiment)\n","\n","y_val_sentiment = []\n","for emotion_num in y_val:\n","  if emotion_num == '2':\n","    y_val_sentiment.append(1)\n","  else:\n","    y_val_sentiment.append(0)\n","y_val_sentiment = np.array(y_val_sentiment)\n","\n","from sklearn.metrics import accuracy_score\n","from sklearn.naive_bayes import MultinomialNB\n","\n","nb_clf_p = LinearSVC()#fit_prior=False)\n","nb_clf_p.fit(X_train, y_train_sentiment)\n","print(accuracy_score(y_train_sentiment, nb_clf_p.predict(X_train)),\n","      accuracy_score(y_val_sentiment, nb_clf_p.predict(X_val)))\n","\n","# split off negative tweets\n","y_train_predict_sentiment = nb_clf_p.predict(X_train)\n","y_val_predict_sentiment = nb_clf_p.predict(X_val)\n","#print(y_train_predict[0:10])\n","\n","neg_tweets_train = tweets_train_normalised_shuffled[y_train_predict_sentiment==0]\n","neg_tweets_val = tweets_val_normalised_shuffled[y_val_predict_sentiment==0]\n","\n","X_train_n = tfidf_train.fit_transform(neg_tweets_train)\n","X_val_n = tfidf_train.transform(neg_tweets_val)\n","y_train_n = y_train[y_train_predict_sentiment==0]\n","y_val_n = y_val[y_val_predict_sentiment==0]\n","\n","X_train_n.shape, y_train_n.shape, X_val_n.shape, y_val_n.shape\n","\n","from sklearn.metrics import accuracy_score\n","from sklearn.naive_bayes import MultinomialNB\n","\n","nb_clf_n = LinearSVC()#fit_prior=False)\n","nb_clf_n.fit(X_train_n, y_train_n)\n","print(accuracy_score(y_train_n, nb_clf_n.predict(X_train_n)), accuracy_score(y_val_n, nb_clf_n.predict(X_val_n)))\n","\n","final_labels = []\n","y_val_predict_n = nb_clf_n.predict(X_val_n)\n","\n","neg_counter = 0\n","for label in y_val_predict_sentiment:\n","  if label == 1:\n","    final_labels.append(2)\n","  else:\n","    final_labels.append(y_val_predict_n[neg_counter])\n","    neg_counter += 1\n","\n","confusion_matrix(y_val_predict_sentiment, y_val_sentiment)\n","accuracy_score(final_labels, y_val)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ftz_MtwOdd_5","colab":{}},"source":["from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","ada_clf = AdaBoostClassifier(\n","    DecisionTreeClassifier(max_depth=1), n_estimators=1000, learning_rate=1\n",")\n","ada_clf.fit(X_train, y_train)\n","print(accuracy_score(y_train, ada_clf.predict(X_train)), accuracy_score(y_val, ada_clf.predict(X_val)))\n","\n","from sklearn.ensemble import VotingClassifier\n","voting_clf = VotingClassifier(\n","    estimators=[('nb', nb_clf), ('svm', linearsvm_clf), ('ada', ada_clf)], voting='hard'\n",")\n","voting_clf.fit(X_train, y_train)\n","accuracy_score(y_train, voting_clf.predict(X_train)), accuracy_score(y_val, voting_clf.predict(X_val))"],"execution_count":0,"outputs":[]}]}